
Micromouse2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004928  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004af8  08004af8  00014af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b58  08004b58  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004b58  08004b58  00014b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b60  08004b60  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004b68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005d38  20000010  08004b78  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005d48  08004b78  00025d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017113  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002da5  00000000  00000000  00037153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00039ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  0003b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000033a4  00000000  00000000  0003c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132e9  00000000  00000000  0003f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7bf5  00000000  00000000  0005284d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b24  00000000  00000000  0012a498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004ae0 	.word	0x08004ae0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004ae0 	.word	0x08004ae0

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <h>:
// The main path, once we've solved the maze, the route we use
Node *mainPath[MAZE_SIZE*MAZE_SIZE];
int pathLength = 0;

//Heuristic function
int h (int x, int y) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	6039      	str	r1, [r7, #0]
	return abs(END_X - x) + abs(END_Y - y);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	f1c3 0305 	rsb	r3, r3, #5
 8000518:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800051c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	f1c3 0305 	rsb	r3, r3, #5
 8000526:	2b00      	cmp	r3, #0
 8000528:	bfb8      	it	lt
 800052a:	425b      	neglt	r3, r3
 800052c:	4413      	add	r3, r2
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <insertAt>:

void insertAt(Node **arr, int len, int i, Node* n) {
 800053a:	b480      	push	{r7}
 800053c:	b087      	sub	sp, #28
 800053e:	af00      	add	r7, sp, #0
 8000540:	60f8      	str	r0, [r7, #12]
 8000542:	60b9      	str	r1, [r7, #8]
 8000544:	607a      	str	r2, [r7, #4]
 8000546:	603b      	str	r3, [r7, #0]
	for (int j = len; j > i; j --) {
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	e00f      	b.n	800056e <insertAt+0x34>
		arr[j] = arr[j - 1];
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000554:	3b01      	subs	r3, #1
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	68fa      	ldr	r2, [r7, #12]
 800055a:	441a      	add	r2, r3
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	68f9      	ldr	r1, [r7, #12]
 8000562:	440b      	add	r3, r1
 8000564:	6812      	ldr	r2, [r2, #0]
 8000566:	601a      	str	r2, [r3, #0]
	for (int j = len; j > i; j --) {
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	3b01      	subs	r3, #1
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	697a      	ldr	r2, [r7, #20]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	429a      	cmp	r2, r3
 8000574:	dceb      	bgt.n	800054e <insertAt+0x14>
	}
	arr[i] = n;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	68fa      	ldr	r2, [r7, #12]
 800057c:	4413      	add	r3, r2
 800057e:	683a      	ldr	r2, [r7, #0]
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	371c      	adds	r7, #28
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <addNodeIfNotExists>:
	for (int j = i; j < len - 1; j ++) {
		arr[j] = arr[j + 1];
	}
}

void addNodeIfNotExists(int x, int y) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	//Check if we've seen the node before
	for (int i = 0; i < numNodes; i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
 800059e:	e012      	b.n	80005c6 <addNodeIfNotExists+0x36>
		if (nodes[i]->x == x && nodes[i]->y == y) {
 80005a0:	4a3a      	ldr	r2, [pc, #232]	; (800068c <addNodeIfNotExists+0xfc>)
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d107      	bne.n	80005c0 <addNodeIfNotExists+0x30>
 80005b0:	4a36      	ldr	r2, [pc, #216]	; (800068c <addNodeIfNotExists+0xfc>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d060      	beq.n	8000682 <addNodeIfNotExists+0xf2>
	for (int i = 0; i < numNodes; i++) {
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	3301      	adds	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <addNodeIfNotExists+0x100>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	697a      	ldr	r2, [r7, #20]
 80005cc:	429a      	cmp	r2, r3
 80005ce:	dbe7      	blt.n	80005a0 <addNodeIfNotExists+0x10>
			//Because our heuristic is nice (just distance)
			return;
		}
	}

	Node *n = &nodesStatic[numNodes];
 80005d0:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <addNodeIfNotExists+0x100>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4613      	mov	r3, r2
 80005d6:	00db      	lsls	r3, r3, #3
 80005d8:	1a9b      	subs	r3, r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4a2d      	ldr	r2, [pc, #180]	; (8000694 <addNodeIfNotExists+0x104>)
 80005de:	4413      	add	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
	n->x = x;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	687a      	ldr	r2, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]
	n->y = y;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	683a      	ldr	r2, [r7, #0]
 80005ec:	605a      	str	r2, [r3, #4]
	n->last = current;
 80005ee:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <addNodeIfNotExists+0x108>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	619a      	str	r2, [r3, #24]
	n->guess = h(x, y);
 80005f6:	6839      	ldr	r1, [r7, #0]
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff ff85 	bl	8000508 <h>
 80005fe:	4602      	mov	r2, r0
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	611a      	str	r2, [r3, #16]
	n->distance = current->distance + 1;
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <addNodeIfNotExists+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	68db      	ldr	r3, [r3, #12]
 800060a:	1c5a      	adds	r2, r3, #1
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	60da      	str	r2, [r3, #12]
	if (MAPPING_MODE == 0) {
		n->score = n->distance + n->guess;
	}else if (MAPPING_MODE == 1 || MAPPING_MODE == 3) {
		n->score = n->distance + n->guess*10;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	68d9      	ldr	r1, [r3, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	691a      	ldr	r2, [r3, #16]
 8000618:	4613      	mov	r3, r2
 800061a:	009b      	lsls	r3, r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	18ca      	adds	r2, r1, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	615a      	str	r2, [r3, #20]
	if (closedNodes >= 1) {
		assertEq(nodes[closedNodes - 1].closed, true, "B");
	}*/

	//Sort the new node in
	for (int i = closedNodes; i < numNodes; i++) {
 8000626:	4b1d      	ldr	r3, [pc, #116]	; (800069c <addNodeIfNotExists+0x10c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	e018      	b.n	8000660 <addNodeIfNotExists+0xd0>
		if (nodes[i]->score > n->score) {
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <addNodeIfNotExists+0xfc>)
 8000630:	693b      	ldr	r3, [r7, #16]
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	695a      	ldr	r2, [r3, #20]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	429a      	cmp	r2, r3
 800063e:	dd0c      	ble.n	800065a <addNodeIfNotExists+0xca>
			//nodes.splice(i, 0, n);
			//arr, length, index to insert, item
			insertAt(nodes, numNodes, i, n);
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <addNodeIfNotExists+0x100>)
 8000642:	6819      	ldr	r1, [r3, #0]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	693a      	ldr	r2, [r7, #16]
 8000648:	4810      	ldr	r0, [pc, #64]	; (800068c <addNodeIfNotExists+0xfc>)
 800064a:	f7ff ff76 	bl	800053a <insertAt>
			numNodes++;
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <addNodeIfNotExists+0x100>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a0e      	ldr	r2, [pc, #56]	; (8000690 <addNodeIfNotExists+0x100>)
 8000656:	6013      	str	r3, [r2, #0]
			return;
 8000658:	e014      	b.n	8000684 <addNodeIfNotExists+0xf4>
	for (int i = closedNodes; i < numNodes; i++) {
 800065a:	693b      	ldr	r3, [r7, #16]
 800065c:	3301      	adds	r3, #1
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	4b0b      	ldr	r3, [pc, #44]	; (8000690 <addNodeIfNotExists+0x100>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	429a      	cmp	r2, r3
 8000668:	dbe1      	blt.n	800062e <addNodeIfNotExists+0x9e>
		}
	}
	//Otherwise, add the node to the end
    //	nodes.splice(nodes.length, 0, n);
    //	insertAt(nodes, numNodes, numNodes, n);
	nodes[numNodes] = n;
 800066a:	4b09      	ldr	r3, [pc, #36]	; (8000690 <addNodeIfNotExists+0x100>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4907      	ldr	r1, [pc, #28]	; (800068c <addNodeIfNotExists+0xfc>)
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	numNodes++;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <addNodeIfNotExists+0x100>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	4a04      	ldr	r2, [pc, #16]	; (8000690 <addNodeIfNotExists+0x100>)
 800067e:	6013      	str	r3, [r2, #0]
 8000680:	e000      	b.n	8000684 <addNodeIfNotExists+0xf4>
			return;
 8000682:	bf00      	nop
}
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20004eac 	.word	0x20004eac
 8000690:	20000030 	.word	0x20000030
 8000694:	200051cc 	.word	0x200051cc
 8000698:	20004ea8 	.word	0x20004ea8
 800069c:	2000002c 	.word	0x2000002c

080006a0 <checkDone>:

int checkDone() {
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
	return current->x == END_X && current->y == END_Y;
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <checkDone+0x28>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b05      	cmp	r3, #5
 80006ac:	d106      	bne.n	80006bc <checkDone+0x1c>
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <checkDone+0x28>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	2b05      	cmp	r3, #5
 80006b6:	d101      	bne.n	80006bc <checkDone+0x1c>
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <checkDone+0x1e>
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20004ea8 	.word	0x20004ea8

080006cc <createPath>:

// Once we've solved the maze, converts node tree into `mainPath` (a list)
void createPath() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	mainPath[0] = current;
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <createPath+0x50>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <createPath+0x54>)
 80006d8:	6013      	str	r3, [r2, #0]
	Node *previous = current;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <createPath+0x50>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	607b      	str	r3, [r7, #4]
	pathLength = 1;
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <createPath+0x58>)
 80006e2:	2201      	movs	r2, #1
 80006e4:	601a      	str	r2, [r3, #0]
	while (previous->last->distance >= 0) {
 80006e6:	e00f      	b.n	8000708 <createPath+0x3c>
		// path.unshift(backtrack.last);
		insertAt(mainPath, pathLength, 0, previous->last);
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <createPath+0x58>)
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	2200      	movs	r2, #0
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <createPath+0x54>)
 80006f4:	f7ff ff21 	bl	800053a <insertAt>
		pathLength++;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <createPath+0x58>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a09      	ldr	r2, [pc, #36]	; (8000724 <createPath+0x58>)
 8000700:	6013      	str	r3, [r2, #0]
		previous = previous->last;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	699b      	ldr	r3, [r3, #24]
 8000706:	607b      	str	r3, [r7, #4]
	while (previous->last->distance >= 0) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	daea      	bge.n	80006e8 <createPath+0x1c>
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20004ea8 	.word	0x20004ea8
 8000720:	2000503c 	.word	0x2000503c
 8000724:	20000034 	.word	0x20000034

08000728 <updateMaze>:



//Update the known information about the maze with what we know
void updateMaze() {
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	//TODO: Scan the maze

	//If there's not a wall to each of our sides, add a new node there
	if (!maze[current->y][current->x][0]) {
 800072c:	4b3a      	ldr	r3, [pc, #232]	; (8000818 <updateMaze+0xf0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	4b39      	ldr	r3, [pc, #228]	; (8000818 <updateMaze+0xf0>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6819      	ldr	r1, [r3, #0]
 8000738:	4838      	ldr	r0, [pc, #224]	; (800081c <updateMaze+0xf4>)
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4413      	add	r3, r2
 8000744:	440b      	add	r3, r1
 8000746:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d10a      	bne.n	8000764 <updateMaze+0x3c>
		addNodeIfNotExists(current->x, current->y - 1);
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <updateMaze+0xf0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4b30      	ldr	r3, [pc, #192]	; (8000818 <updateMaze+0xf0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	4619      	mov	r1, r3
 800075e:	4610      	mov	r0, r2
 8000760:	f7ff ff16 	bl	8000590 <addNodeIfNotExists>
	}
	//Left
	if (!maze[current->y][current->x][1]) {
 8000764:	4b2c      	ldr	r3, [pc, #176]	; (8000818 <updateMaze+0xf0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <updateMaze+0xf0>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6819      	ldr	r1, [r3, #0]
 8000770:	482a      	ldr	r0, [pc, #168]	; (800081c <updateMaze+0xf4>)
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	4413      	add	r3, r2
 800077c:	440b      	add	r3, r1
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	4403      	add	r3, r0
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d10a      	bne.n	800079e <updateMaze+0x76>
		addNodeIfNotExists(current->x - 1, current->y);
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <updateMaze+0xf0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	4b21      	ldr	r3, [pc, #132]	; (8000818 <updateMaze+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4619      	mov	r1, r3
 8000798:	4610      	mov	r0, r2
 800079a:	f7ff fef9 	bl	8000590 <addNodeIfNotExists>
	}
	//Down
	if (!maze[current->y + 1][current->x][0]) {
 800079e:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <updateMaze+0xf0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <updateMaze+0xf0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	6819      	ldr	r1, [r3, #0]
 80007ac:	481b      	ldr	r0, [pc, #108]	; (800081c <updateMaze+0xf4>)
 80007ae:	4613      	mov	r3, r2
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	4413      	add	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d10a      	bne.n	80007d8 <updateMaze+0xb0>
		addNodeIfNotExists(current->x, current->y + 1);
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <updateMaze+0xf0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <updateMaze+0xf0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	3301      	adds	r3, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	4610      	mov	r0, r2
 80007d4:	f7ff fedc 	bl	8000590 <addNodeIfNotExists>
	}
	//Right
	if (!maze[current->y][current->x + 1][1]) {
 80007d8:	4b0f      	ldr	r3, [pc, #60]	; (8000818 <updateMaze+0xf0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	685a      	ldr	r2, [r3, #4]
 80007de:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <updateMaze+0xf0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	1c59      	adds	r1, r3, #1
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <updateMaze+0xf4>)
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	4413      	add	r3, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	00db      	lsls	r3, r3, #3
 80007f6:	4403      	add	r3, r0
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10a      	bne.n	8000814 <updateMaze+0xec>
		addNodeIfNotExists(current->x + 1, current->y);
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <updateMaze+0xf0>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	1c5a      	adds	r2, r3, #1
 8000806:	4b04      	ldr	r3, [pc, #16]	; (8000818 <updateMaze+0xf0>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	4619      	mov	r1, r3
 800080e:	4610      	mov	r0, r2
 8000810:	f7ff febe 	bl	8000590 <addNodeIfNotExists>
	}
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	20004ea8 	.word	0x20004ea8
 800081c:	20004adc 	.word	0x20004adc

08000820 <updateGoal>:

void updateGoal () {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
	if (closedNodes >= numNodes) {
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <updateGoal+0x8c>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <updateGoal+0x90>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	429a      	cmp	r2, r3
 8000830:	da36      	bge.n	80008a0 <updateGoal+0x80>

	if (MAPPING_MODE == 1 || MAPPING_MODE == 2) {
		goal = nodes[closedNodes];
	}else {
		//If there's one adjacent node, go there, otherwise go to A*
		Node *adjacentNode = NULL;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]

		for (int i = 0; i < numNodes; i++) {
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	e01d      	b.n	8000878 <updateGoal+0x58>
			//If it's open and adjacent
			if (nodes[i]->last == current && !nodes[i]->closed) {
 800083c:	4a1d      	ldr	r2, [pc, #116]	; (80008b4 <updateGoal+0x94>)
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000844:	699a      	ldr	r2, [r3, #24]
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <updateGoal+0x98>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	429a      	cmp	r2, r3
 800084c:	d111      	bne.n	8000872 <updateGoal+0x52>
 800084e:	4a19      	ldr	r2, [pc, #100]	; (80008b4 <updateGoal+0x94>)
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000856:	689b      	ldr	r3, [r3, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d10a      	bne.n	8000872 <updateGoal+0x52>
				// If we already have one
				if (adjacentNode != NULL) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d002      	beq.n	8000868 <updateGoal+0x48>
					//Then we want to ignore it
					adjacentNode = NULL;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	e004      	b.n	8000872 <updateGoal+0x52>
				}else {
					adjacentNode = nodes[i];
 8000868:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <updateGoal+0x94>)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000870:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < numNodes; i++) {
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <updateGoal+0x90>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	dbdc      	blt.n	800083c <updateGoal+0x1c>
				}
			}
		}

		if (adjacentNode == NULL) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d107      	bne.n	8000898 <updateGoal+0x78>
			goal = nodes[closedNodes];
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <updateGoal+0x8c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <updateGoal+0x94>)
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <updateGoal+0x9c>)
 8000894:	6013      	str	r3, [r2, #0]
 8000896:	e004      	b.n	80008a2 <updateGoal+0x82>
		}else {
			goal = adjacentNode;
 8000898:	4a08      	ldr	r2, [pc, #32]	; (80008bc <updateGoal+0x9c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e000      	b.n	80008a2 <updateGoal+0x82>
		return;
 80008a0:	bf00      	nop
		}
	}
}
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	2000002c 	.word	0x2000002c
 80008b0:	20000030 	.word	0x20000030
 80008b4:	20004eac 	.word	0x20004eac
 80008b8:	20004ea8 	.word	0x20004ea8
 80008bc:	20004ea4 	.word	0x20004ea4

080008c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c4:	f000 fa38 	bl	8000d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c8:	f000 f816 	bl	80008f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008cc:	f000 f874 	bl	80009b8 <MX_GPIO_Init>
  // TODO: Check DIP here I think

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008d0:	f001 fb7a 	bl	8001fc8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008d4:	4a05      	ldr	r2, [pc, #20]	; (80008ec <main+0x2c>)
 80008d6:	2100      	movs	r1, #0
 80008d8:	4805      	ldr	r0, [pc, #20]	; (80008f0 <main+0x30>)
 80008da:	f001 fbbf 	bl	800205c <osThreadNew>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a04      	ldr	r2, [pc, #16]	; (80008f4 <main+0x34>)
 80008e2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008e4:	f001 fb94 	bl	8002010 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <main+0x28>
 80008ea:	bf00      	nop
 80008ec:	08004b1c 	.word	0x08004b1c
 80008f0:	08000a25 	.word	0x08000a25
 80008f4:	20004948 	.word	0x20004948

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b094      	sub	sp, #80	; 0x50
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	2234      	movs	r2, #52	; 0x34
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f004 f8e2 	bl	8004ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	f107 0308 	add.w	r3, r7, #8
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
 800091a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <SystemClock_Config+0xb8>)
 8000922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000924:	4a22      	ldr	r2, [pc, #136]	; (80009b0 <SystemClock_Config+0xb8>)
 8000926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800092a:	6413      	str	r3, [r2, #64]	; 0x40
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <SystemClock_Config+0xb8>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000938:	2300      	movs	r3, #0
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <SystemClock_Config+0xbc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <SystemClock_Config+0xbc>)
 8000946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <SystemClock_Config+0xbc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000958:	2302      	movs	r3, #2
 800095a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800095c:	2301      	movs	r3, #1
 800095e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000960:	2310      	movs	r3, #16
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000964:	2300      	movs	r3, #0
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4618      	mov	r0, r3
 800096e:	f000 fd9b 	bl	80014a8 <HAL_RCC_OscConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000978:	f000 f8ce 	bl	8000b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097c:	230f      	movs	r3, #15
 800097e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f000 faf2 	bl	8000f80 <HAL_RCC_ClockConfig>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80009a2:	f000 f8b9 	bl	8000b18 <Error_Handler>
  }
}
 80009a6:	bf00      	nop
 80009a8:	3750      	adds	r7, #80	; 0x50
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800
 80009b4:	40007000 	.word	0x40007000

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_GPIO_Init+0x68>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <MX_GPIO_Init+0x68>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_GPIO_Init+0x68>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_GPIO_Init+0x68>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a0f      	ldr	r2, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x68>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_GPIO_Init+0x68>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_GPIO_Init+0x68>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x68>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_GPIO_Init+0x68>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

}
 8000a12:	bf00      	nop
 8000a14:	3714      	adds	r7, #20
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
		while (1 == 1) {
			//Then we've solved the maze
			if (pathLength > 0) {
 8000a2c:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <StartDefaultTask+0xb8>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dd03      	ble.n	8000a3c <StartDefaultTask+0x18>
				osDelay(10);
 8000a34:	200a      	movs	r0, #10
 8000a36:	f001 fba3 	bl	8002180 <osDelay>
 8000a3a:	e7f7      	b.n	8000a2c <StartDefaultTask+0x8>
				// if (goal.x == (robot.x - SQUARE_SIZE/2)/SQUARE_SIZE &&
				// goal.y == (robot.y - SQUARE_SIZE/2)/SQUARE_SIZE) {
				// Can probably check if backPathLength == 0 or something
				if (1 == 1 /*TODO*/) {
					//Update where we are
					current = goal;
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <StartDefaultTask+0xbc>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a28      	ldr	r2, [pc, #160]	; (8000ae4 <StartDefaultTask+0xc0>)
 8000a42:	6013      	str	r3, [r2, #0]

					//Check if we're done
					if (checkDone()) {
 8000a44:	f7ff fe2c 	bl	80006a0 <checkDone>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <StartDefaultTask+0x30>
						createPath();
 8000a4e:	f7ff fe3d 	bl	80006cc <createPath>
 8000a52:	e7eb      	b.n	8000a2c <StartDefaultTask+0x8>
					}else {
						//Update our knowledge of the maze, from the current tile
						// i.e. scan around us
						updateMaze();
 8000a54:	f7ff fe68 	bl	8000728 <updateMaze>

						//Close the current node
						current->closed = 1;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <StartDefaultTask+0xc0>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	609a      	str	r2, [r3, #8]
						//If this wasn't the next node scheduled to be closed, we need to move it to the closed section of the list
						if (nodes[closedNodes] != current) {
 8000a60:	4b21      	ldr	r3, [pc, #132]	; (8000ae8 <StartDefaultTask+0xc4>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a21      	ldr	r2, [pc, #132]	; (8000aec <StartDefaultTask+0xc8>)
 8000a66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ae4 <StartDefaultTask+0xc0>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d02c      	beq.n	8000acc <StartDefaultTask+0xa8>
							Node *lastValue = nodes[closedNodes];
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <StartDefaultTask+0xc4>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1d      	ldr	r2, [pc, #116]	; (8000aec <StartDefaultTask+0xc8>)
 8000a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7c:	617b      	str	r3, [r7, #20]
							for (int i = closedNodes + 1; i < numNodes; i++) {
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <StartDefaultTask+0xc4>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	613b      	str	r3, [r7, #16]
 8000a86:	e013      	b.n	8000ab0 <StartDefaultTask+0x8c>
								Node *tmp = nodes[i];
 8000a88:	4a18      	ldr	r2, [pc, #96]	; (8000aec <StartDefaultTask+0xc8>)
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a90:	60fb      	str	r3, [r7, #12]
								nodes[i] = lastValue;
 8000a92:	4916      	ldr	r1, [pc, #88]	; (8000aec <StartDefaultTask+0xc8>)
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	697a      	ldr	r2, [r7, #20]
 8000a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
								lastValue = tmp;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	617b      	str	r3, [r7, #20]
								if (tmp == current) {
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <StartDefaultTask+0xc0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	68fa      	ldr	r2, [r7, #12]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	d008      	beq.n	8000abc <StartDefaultTask+0x98>
							for (int i = closedNodes + 1; i < numNodes; i++) {
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	3301      	adds	r3, #1
 8000aae:	613b      	str	r3, [r7, #16]
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <StartDefaultTask+0xcc>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	429a      	cmp	r2, r3
 8000ab8:	dbe6      	blt.n	8000a88 <StartDefaultTask+0x64>
 8000aba:	e000      	b.n	8000abe <StartDefaultTask+0x9a>
									//Then we're done
									break;
 8000abc:	bf00      	nop
								}
							}
							nodes[closedNodes] = current;
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <StartDefaultTask+0xc4>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <StartDefaultTask+0xc0>)
 8000ac4:	6812      	ldr	r2, [r2, #0]
 8000ac6:	4909      	ldr	r1, [pc, #36]	; (8000aec <StartDefaultTask+0xc8>)
 8000ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						}
						closedNodes++;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <StartDefaultTask+0xc4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <StartDefaultTask+0xc4>)
 8000ad4:	6013      	str	r3, [r2, #0]

						// Update goal
						//  get a new goal
						updateGoal();
 8000ad6:	f7ff fea3 	bl	8000820 <updateGoal>
			if (pathLength > 0) {
 8000ada:	e7a7      	b.n	8000a2c <StartDefaultTask+0x8>
 8000adc:	20000034 	.word	0x20000034
 8000ae0:	20004ea4 	.word	0x20004ea4
 8000ae4:	20004ea8 	.word	0x20004ea8
 8000ae8:	2000002c 	.word	0x2000002c
 8000aec:	20004eac 	.word	0x20004eac
 8000af0:	20000030 	.word	0x20000030

08000af4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d101      	bne.n	8000b0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b06:	f000 f939 	bl	8000d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40010000 	.word	0x40010000

08000b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_MspInit+0x54>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <HAL_MspInit+0x54>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x54>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_MspInit+0x54>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_MspInit+0x54>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_MspInit+0x54>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f000 f9dd 	bl	8000f2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	2019      	movs	r0, #25
 8000b96:	f000 f9c9 	bl	8000f2c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b9a:	2019      	movs	r0, #25
 8000b9c:	f000 f9e2 	bl	8000f64 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <HAL_InitTick+0xa0>)
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	; (8000c20 <HAL_InitTick+0xa0>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <HAL_InitTick+0xa0>)
 8000bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bbc:	f107 0210 	add.w	r2, r7, #16
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 fae0 	bl	800118c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000bcc:	f000 faca 	bl	8001164 <HAL_RCC_GetPCLK2Freq>
 8000bd0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bd4:	4a13      	ldr	r2, [pc, #76]	; (8000c24 <HAL_InitTick+0xa4>)
 8000bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bda:	0c9b      	lsrs	r3, r3, #18
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_InitTick+0xa8>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <HAL_InitTick+0xac>)
 8000be4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_InitTick+0xa8>)
 8000be8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_InitTick+0xa8>)
 8000bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_InitTick+0xa8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_InitTick+0xa8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000c00:	4809      	ldr	r0, [pc, #36]	; (8000c28 <HAL_InitTick+0xa8>)
 8000c02:	f000 feef 	bl	80019e4 <HAL_TIM_Base_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d104      	bne.n	8000c16 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000c0c:	4806      	ldr	r0, [pc, #24]	; (8000c28 <HAL_InitTick+0xa8>)
 8000c0e:	f000 ff43 	bl	8001a98 <HAL_TIM_Base_Start_IT>
 8000c12:	4603      	mov	r3, r0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3730      	adds	r7, #48	; 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40023800 	.word	0x40023800
 8000c24:	431bde83 	.word	0x431bde83
 8000c28:	20005cbc 	.word	0x20005cbc
 8000c2c:	40010000 	.word	0x40010000

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	e7fe      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	e7fe      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c6a:	f000 ff85 	bl	8001b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20005cbc 	.word	0x20005cbc

08000c78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <SystemInit+0x60>)
 8000c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c82:	4a15      	ldr	r2, [pc, #84]	; (8000cd8 <SystemInit+0x60>)
 8000c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <SystemInit+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <SystemInit+0x64>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c98:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <SystemInit+0x64>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <SystemInit+0x64>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <SystemInit+0x64>)
 8000ca4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <SystemInit+0x64>)
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <SystemInit+0x68>)
 8000cb2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <SystemInit+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a08      	ldr	r2, [pc, #32]	; (8000cdc <SystemInit+0x64>)
 8000cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cbe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <SystemInit+0x64>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SystemInit+0x60>)
 8000cc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ccc:	609a      	str	r2, [r3, #8]
#endif
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	24003010 	.word	0x24003010

08000ce4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ce4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d1c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ce8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cea:	e003      	b.n	8000cf4 <LoopCopyDataInit>

08000cec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cf0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cf2:	3104      	adds	r1, #4

08000cf4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000cf4:	480b      	ldr	r0, [pc, #44]	; (8000d24 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cf8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cfc:	d3f6      	bcc.n	8000cec <CopyDataInit>
  ldr  r2, =_sbss
 8000cfe:	4a0b      	ldr	r2, [pc, #44]	; (8000d2c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d00:	e002      	b.n	8000d08 <LoopFillZerobss>

08000d02 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d02:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d04:	f842 3b04 	str.w	r3, [r2], #4

08000d08 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d0a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d0c:	d3f9      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d0e:	f7ff ffb3 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f003 feab 	bl	8004a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d16:	f7ff fdd3 	bl	80008c0 <main>
  bx  lr    
 8000d1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d1c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d20:	08004b68 	.word	0x08004b68
  ldr  r0, =_sdata
 8000d24:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d28:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d2c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d30:	20005d48 	.word	0x20005d48

08000d34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d34:	e7fe      	b.n	8000d34 <ADC_IRQHandler>
	...

08000d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d3c:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_Init+0x40>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <HAL_Init+0x40>)
 8000d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d48:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0a      	ldr	r2, [pc, #40]	; (8000d78 <HAL_Init+0x40>)
 8000d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <HAL_Init+0x40>)
 8000d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d60:	2003      	movs	r0, #3
 8000d62:	f000 f8d8 	bl	8000f16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ff0a 	bl	8000b80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d6c:	f7ff fedc 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40023c00 	.word	0x40023c00

08000d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <HAL_IncTick+0x20>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_IncTick+0x24>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <HAL_IncTick+0x24>)
 8000d8e:	6013      	str	r3, [r2, #0]
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000008 	.word	0x20000008
 8000da0:	20005d04 	.word	0x20005d04

08000da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  return uwTick;
 8000da8:	4b03      	ldr	r3, [pc, #12]	; (8000db8 <HAL_GetTick+0x14>)
 8000daa:	681b      	ldr	r3, [r3, #0]
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20005d04 	.word	0x20005d04

08000dbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd2:	68ba      	ldr	r2, [r7, #8]
 8000dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd8:	4013      	ands	r3, r2
 8000dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dee:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <__NVIC_SetPriorityGrouping+0x44>)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	60d3      	str	r3, [r2, #12]
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e08:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <__NVIC_GetPriorityGrouping+0x18>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0307 	and.w	r3, r3, #7
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db0b      	blt.n	8000e4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	f003 021f 	and.w	r2, r3, #31
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <__NVIC_EnableIRQ+0x38>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	095b      	lsrs	r3, r3, #5
 8000e40:	2001      	movs	r0, #1
 8000e42:	fa00 f202 	lsl.w	r2, r0, r2
 8000e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000e100 	.word	0xe000e100

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	; (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	; (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	; 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	; 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff4c 	bl	8000dbc <__NVIC_SetPriorityGrouping>
}
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
 8000f38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f3e:	f7ff ff61 	bl	8000e04 <__NVIC_GetPriorityGrouping>
 8000f42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f7ff ffb1 	bl	8000eb0 <NVIC_EncodePriority>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f54:	4611      	mov	r1, r2
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff ff80 	bl	8000e5c <__NVIC_SetPriority>
}
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff54 	bl	8000e20 <__NVIC_EnableIRQ>
}
 8000f78:	bf00      	nop
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d101      	bne.n	8000f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e0cc      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f94:	4b68      	ldr	r3, [pc, #416]	; (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 030f 	and.w	r3, r3, #15
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d90c      	bls.n	8000fbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fa2:	4b65      	ldr	r3, [pc, #404]	; (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa4:	683a      	ldr	r2, [r7, #0]
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000faa:	4b63      	ldr	r3, [pc, #396]	; (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	683a      	ldr	r2, [r7, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d001      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e0b8      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d020      	beq.n	800100a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d005      	beq.n	8000fe0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fd4:	4b59      	ldr	r3, [pc, #356]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	4a58      	ldr	r2, [pc, #352]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 0308 	and.w	r3, r3, #8
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d005      	beq.n	8000ff8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fec:	4b53      	ldr	r3, [pc, #332]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	4a52      	ldr	r2, [pc, #328]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ff6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff8:	4b50      	ldr	r3, [pc, #320]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	494d      	ldr	r1, [pc, #308]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001006:	4313      	orrs	r3, r2
 8001008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b00      	cmp	r3, #0
 8001014:	d044      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d107      	bne.n	800102e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	4b47      	ldr	r3, [pc, #284]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d119      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e07f      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d003      	beq.n	800103e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800103a:	2b03      	cmp	r3, #3
 800103c:	d107      	bne.n	800104e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103e:	4b3f      	ldr	r3, [pc, #252]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e06f      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104e:	4b3b      	ldr	r3, [pc, #236]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e067      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105e:	4b37      	ldr	r3, [pc, #220]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f023 0203 	bic.w	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4934      	ldr	r1, [pc, #208]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 800106c:	4313      	orrs	r3, r2
 800106e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001070:	f7ff fe98 	bl	8000da4 <HAL_GetTick>
 8001074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001076:	e00a      	b.n	800108e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001078:	f7ff fe94 	bl	8000da4 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	f241 3288 	movw	r2, #5000	; 0x1388
 8001086:	4293      	cmp	r3, r2
 8001088:	d901      	bls.n	800108e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e04f      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108e:	4b2b      	ldr	r3, [pc, #172]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 020c 	and.w	r2, r3, #12
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	429a      	cmp	r2, r3
 800109e:	d1eb      	bne.n	8001078 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80010a0:	4b25      	ldr	r3, [pc, #148]	; (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 030f 	and.w	r3, r3, #15
 80010a8:	683a      	ldr	r2, [r7, #0]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d20c      	bcs.n	80010c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <HAL_RCC_ClockConfig+0x1b8>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e032      	b.n	800112e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4916      	ldr	r1, [pc, #88]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	490e      	ldr	r1, [pc, #56]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	4313      	orrs	r3, r2
 8001104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001106:	f000 f873 	bl	80011f0 <HAL_RCC_GetSysClockFreq>
 800110a:	4602      	mov	r2, r0
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_RCC_ClockConfig+0x1bc>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	091b      	lsrs	r3, r3, #4
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	490a      	ldr	r1, [pc, #40]	; (8001140 <HAL_RCC_ClockConfig+0x1c0>)
 8001118:	5ccb      	ldrb	r3, [r1, r3]
 800111a:	fa22 f303 	lsr.w	r3, r2, r3
 800111e:	4a09      	ldr	r2, [pc, #36]	; (8001144 <HAL_RCC_ClockConfig+0x1c4>)
 8001120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_RCC_ClockConfig+0x1c8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fd2a 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023c00 	.word	0x40023c00
 800113c:	40023800 	.word	0x40023800
 8001140:	08004b40 	.word	0x08004b40
 8001144:	20000000 	.word	0x20000000
 8001148:	20000004 	.word	0x20000004

0800114c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001150:	4b03      	ldr	r3, [pc, #12]	; (8001160 <HAL_RCC_GetHCLKFreq+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000

08001164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001168:	f7ff fff0 	bl	800114c <HAL_RCC_GetHCLKFreq>
 800116c:	4602      	mov	r2, r0
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	0b5b      	lsrs	r3, r3, #13
 8001174:	f003 0307 	and.w	r3, r3, #7
 8001178:	4903      	ldr	r1, [pc, #12]	; (8001188 <HAL_RCC_GetPCLK2Freq+0x24>)
 800117a:	5ccb      	ldrb	r3, [r1, r3]
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001180:	4618      	mov	r0, r3
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40023800 	.word	0x40023800
 8001188:	08004b50 	.word	0x08004b50

0800118c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	220f      	movs	r2, #15
 800119a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <HAL_RCC_GetClockConfig+0x5c>)
 800119e:	689b      	ldr	r3, [r3, #8]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <HAL_RCC_GetClockConfig+0x5c>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <HAL_RCC_GetClockConfig+0x5c>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_RCC_GetClockConfig+0x5c>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	08db      	lsrs	r3, r3, #3
 80011c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_RCC_GetClockConfig+0x60>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 020f 	and.w	r2, r3, #15
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40023c00 	.word	0x40023c00

080011f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011f4:	b087      	sub	sp, #28
 80011f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011f8:	2600      	movs	r6, #0
 80011fa:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80011fc:	2600      	movs	r6, #0
 80011fe:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8001200:	2600      	movs	r6, #0
 8001202:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8001204:	2600      	movs	r6, #0
 8001206:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001208:	2600      	movs	r6, #0
 800120a:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800120c:	4ea3      	ldr	r6, [pc, #652]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800120e:	68b6      	ldr	r6, [r6, #8]
 8001210:	f006 060c 	and.w	r6, r6, #12
 8001214:	2e0c      	cmp	r6, #12
 8001216:	f200 8137 	bhi.w	8001488 <HAL_RCC_GetSysClockFreq+0x298>
 800121a:	f20f 0c08 	addw	ip, pc, #8
 800121e:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8001222:	bf00      	nop
 8001224:	08001259 	.word	0x08001259
 8001228:	08001489 	.word	0x08001489
 800122c:	08001489 	.word	0x08001489
 8001230:	08001489 	.word	0x08001489
 8001234:	0800125f 	.word	0x0800125f
 8001238:	08001489 	.word	0x08001489
 800123c:	08001489 	.word	0x08001489
 8001240:	08001489 	.word	0x08001489
 8001244:	08001265 	.word	0x08001265
 8001248:	08001489 	.word	0x08001489
 800124c:	08001489 	.word	0x08001489
 8001250:	08001489 	.word	0x08001489
 8001254:	0800137b 	.word	0x0800137b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001258:	4b91      	ldr	r3, [pc, #580]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800125a:	613b      	str	r3, [r7, #16]
       break;
 800125c:	e117      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800125e:	4b91      	ldr	r3, [pc, #580]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001260:	613b      	str	r3, [r7, #16]
      break;
 8001262:	e114      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001264:	4b8d      	ldr	r3, [pc, #564]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800126c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800126e:	4b8b      	ldr	r3, [pc, #556]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800127a:	4b88      	ldr	r3, [pc, #544]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	099b      	lsrs	r3, r3, #6
 8001280:	461a      	mov	r2, r3
 8001282:	f04f 0300 	mov.w	r3, #0
 8001286:	f240 14ff 	movw	r4, #511	; 0x1ff
 800128a:	f04f 0500 	mov.w	r5, #0
 800128e:	ea02 0004 	and.w	r0, r2, r4
 8001292:	ea03 0105 	and.w	r1, r3, r5
 8001296:	4b83      	ldr	r3, [pc, #524]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8001298:	fb03 f201 	mul.w	r2, r3, r1
 800129c:	2300      	movs	r3, #0
 800129e:	fb03 f300 	mul.w	r3, r3, r0
 80012a2:	4413      	add	r3, r2
 80012a4:	4a7f      	ldr	r2, [pc, #508]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80012a6:	fba0 0102 	umull	r0, r1, r0, r2
 80012aa:	440b      	add	r3, r1
 80012ac:	4619      	mov	r1, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	461a      	mov	r2, r3
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	f7fe ffab 	bl	8000210 <__aeabi_uldivmod>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4613      	mov	r3, r2
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	e04c      	b.n	800135e <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012c4:	4b75      	ldr	r3, [pc, #468]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	099b      	lsrs	r3, r3, #6
 80012ca:	461a      	mov	r2, r3
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	f240 10ff 	movw	r0, #511	; 0x1ff
 80012d4:	f04f 0100 	mov.w	r1, #0
 80012d8:	ea02 0800 	and.w	r8, r2, r0
 80012dc:	ea03 0901 	and.w	r9, r3, r1
 80012e0:	4640      	mov	r0, r8
 80012e2:	4649      	mov	r1, r9
 80012e4:	f04f 0200 	mov.w	r2, #0
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	014b      	lsls	r3, r1, #5
 80012ee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80012f2:	0142      	lsls	r2, r0, #5
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	ebb0 0008 	subs.w	r0, r0, r8
 80012fc:	eb61 0109 	sbc.w	r1, r1, r9
 8001300:	f04f 0200 	mov.w	r2, #0
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	018b      	lsls	r3, r1, #6
 800130a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800130e:	0182      	lsls	r2, r0, #6
 8001310:	1a12      	subs	r2, r2, r0
 8001312:	eb63 0301 	sbc.w	r3, r3, r1
 8001316:	f04f 0000 	mov.w	r0, #0
 800131a:	f04f 0100 	mov.w	r1, #0
 800131e:	00d9      	lsls	r1, r3, #3
 8001320:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001324:	00d0      	lsls	r0, r2, #3
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	eb12 0208 	adds.w	r2, r2, r8
 800132e:	eb43 0309 	adc.w	r3, r3, r9
 8001332:	f04f 0000 	mov.w	r0, #0
 8001336:	f04f 0100 	mov.w	r1, #0
 800133a:	0299      	lsls	r1, r3, #10
 800133c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001340:	0290      	lsls	r0, r2, #10
 8001342:	4602      	mov	r2, r0
 8001344:	460b      	mov	r3, r1
 8001346:	4610      	mov	r0, r2
 8001348:	4619      	mov	r1, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	461a      	mov	r2, r3
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	f7fe ff5d 	bl	8000210 <__aeabi_uldivmod>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4613      	mov	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800135e:	4b4f      	ldr	r3, [pc, #316]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	0c1b      	lsrs	r3, r3, #16
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	3301      	adds	r3, #1
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	fbb2 f3f3 	udiv	r3, r2, r3
 8001376:	613b      	str	r3, [r7, #16]
      break;
 8001378:	e089      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800137a:	4948      	ldr	r1, [pc, #288]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 800137c:	6849      	ldr	r1, [r1, #4]
 800137e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001382:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001384:	4945      	ldr	r1, [pc, #276]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001386:	6849      	ldr	r1, [r1, #4]
 8001388:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800138c:	2900      	cmp	r1, #0
 800138e:	d024      	beq.n	80013da <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001390:	4942      	ldr	r1, [pc, #264]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001392:	6849      	ldr	r1, [r1, #4]
 8001394:	0989      	lsrs	r1, r1, #6
 8001396:	4608      	mov	r0, r1
 8001398:	f04f 0100 	mov.w	r1, #0
 800139c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80013a0:	f04f 0500 	mov.w	r5, #0
 80013a4:	ea00 0204 	and.w	r2, r0, r4
 80013a8:	ea01 0305 	and.w	r3, r1, r5
 80013ac:	493d      	ldr	r1, [pc, #244]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80013ae:	fb01 f003 	mul.w	r0, r1, r3
 80013b2:	2100      	movs	r1, #0
 80013b4:	fb01 f102 	mul.w	r1, r1, r2
 80013b8:	1844      	adds	r4, r0, r1
 80013ba:	493a      	ldr	r1, [pc, #232]	; (80014a4 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80013bc:	fba2 0101 	umull	r0, r1, r2, r1
 80013c0:	1863      	adds	r3, r4, r1
 80013c2:	4619      	mov	r1, r3
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	461a      	mov	r2, r3
 80013c8:	f04f 0300 	mov.w	r3, #0
 80013cc:	f7fe ff20 	bl	8000210 <__aeabi_uldivmod>
 80013d0:	4602      	mov	r2, r0
 80013d2:	460b      	mov	r3, r1
 80013d4:	4613      	mov	r3, r2
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e04a      	b.n	8001470 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	099b      	lsrs	r3, r3, #6
 80013e0:	461a      	mov	r2, r3
 80013e2:	f04f 0300 	mov.w	r3, #0
 80013e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80013ea:	f04f 0100 	mov.w	r1, #0
 80013ee:	ea02 0400 	and.w	r4, r2, r0
 80013f2:	ea03 0501 	and.w	r5, r3, r1
 80013f6:	4620      	mov	r0, r4
 80013f8:	4629      	mov	r1, r5
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	f04f 0300 	mov.w	r3, #0
 8001402:	014b      	lsls	r3, r1, #5
 8001404:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001408:	0142      	lsls	r2, r0, #5
 800140a:	4610      	mov	r0, r2
 800140c:	4619      	mov	r1, r3
 800140e:	1b00      	subs	r0, r0, r4
 8001410:	eb61 0105 	sbc.w	r1, r1, r5
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	f04f 0300 	mov.w	r3, #0
 800141c:	018b      	lsls	r3, r1, #6
 800141e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001422:	0182      	lsls	r2, r0, #6
 8001424:	1a12      	subs	r2, r2, r0
 8001426:	eb63 0301 	sbc.w	r3, r3, r1
 800142a:	f04f 0000 	mov.w	r0, #0
 800142e:	f04f 0100 	mov.w	r1, #0
 8001432:	00d9      	lsls	r1, r3, #3
 8001434:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001438:	00d0      	lsls	r0, r2, #3
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	1912      	adds	r2, r2, r4
 8001440:	eb45 0303 	adc.w	r3, r5, r3
 8001444:	f04f 0000 	mov.w	r0, #0
 8001448:	f04f 0100 	mov.w	r1, #0
 800144c:	0299      	lsls	r1, r3, #10
 800144e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001452:	0290      	lsls	r0, r2, #10
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	461a      	mov	r2, r3
 8001460:	f04f 0300 	mov.w	r3, #0
 8001464:	f7fe fed4 	bl	8000210 <__aeabi_uldivmod>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4613      	mov	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_GetSysClockFreq+0x2ac>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	0f1b      	lsrs	r3, r3, #28
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	fbb2 f3f3 	udiv	r3, r2, r3
 8001484:	613b      	str	r3, [r7, #16]
      break;
 8001486:	e002      	b.n	800148e <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800148a:	613b      	str	r3, [r7, #16]
      break;
 800148c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800148e:	693b      	ldr	r3, [r7, #16]
}
 8001490:	4618      	mov	r0, r3
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800
 80014a0:	00f42400 	.word	0x00f42400
 80014a4:	017d7840 	.word	0x017d7840

080014a8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e28d      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 8083 	beq.w	80015ce <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014c8:	4b94      	ldr	r3, [pc, #592]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f003 030c 	and.w	r3, r3, #12
 80014d0:	2b04      	cmp	r3, #4
 80014d2:	d019      	beq.n	8001508 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014d4:	4b91      	ldr	r3, [pc, #580]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d106      	bne.n	80014ee <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014e0:	4b8e      	ldr	r3, [pc, #568]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014ec:	d00c      	beq.n	8001508 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ee:	4b8b      	ldr	r3, [pc, #556]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80014f6:	2b0c      	cmp	r3, #12
 80014f8:	d112      	bne.n	8001520 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fa:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001506:	d10b      	bne.n	8001520 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001508:	4b84      	ldr	r3, [pc, #528]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d05b      	beq.n	80015cc <HAL_RCC_OscConfig+0x124>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d157      	bne.n	80015cc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e25a      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x90>
 800152a:	4b7c      	ldr	r3, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7b      	ldr	r2, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e01d      	b.n	8001574 <HAL_RCC_OscConfig+0xcc>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0xb4>
 8001542:	4b76      	ldr	r3, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a75      	ldr	r2, [pc, #468]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154c:	6013      	str	r3, [r2, #0]
 800154e:	4b73      	ldr	r3, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a72      	ldr	r2, [pc, #456]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e00b      	b.n	8001574 <HAL_RCC_OscConfig+0xcc>
 800155c:	4b6f      	ldr	r3, [pc, #444]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6e      	ldr	r2, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	4b6c      	ldr	r3, [pc, #432]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a6b      	ldr	r2, [pc, #428]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800156e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d013      	beq.n	80015a4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff fc12 	bl	8000da4 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001584:	f7ff fc0e 	bl	8000da4 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b64      	cmp	r3, #100	; 0x64
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e21f      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001596:	4b61      	ldr	r3, [pc, #388]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0xdc>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fbfe 	bl	8000da4 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fbfa 	bl	8000da4 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e20b      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015be:	4b57      	ldr	r3, [pc, #348]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x104>
 80015ca:	e000      	b.n	80015ce <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d06f      	beq.n	80016ba <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d017      	beq.n	8001616 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015e6:	4b4d      	ldr	r3, [pc, #308]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d105      	bne.n	80015fe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80015f2:	4b4a      	ldr	r3, [pc, #296]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00b      	beq.n	8001616 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001606:	2b0c      	cmp	r3, #12
 8001608:	d11c      	bne.n	8001644 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160a:	4b44      	ldr	r3, [pc, #272]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d116      	bne.n	8001644 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d005      	beq.n	800162e <HAL_RCC_OscConfig+0x186>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d001      	beq.n	800162e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e1d3      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	00db      	lsls	r3, r3, #3
 800163c:	4937      	ldr	r1, [pc, #220]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800163e:	4313      	orrs	r3, r2
 8001640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001642:	e03a      	b.n	80016ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d020      	beq.n	800168e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800164c:	4b34      	ldr	r3, [pc, #208]	; (8001720 <HAL_RCC_OscConfig+0x278>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fba7 	bl	8000da4 <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fba3 	bl	8000da4 <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1b4      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_RCC_OscConfig+0x274>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	4925      	ldr	r1, [pc, #148]	; (800171c <HAL_RCC_OscConfig+0x274>)
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
 800168c:	e015      	b.n	80016ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <HAL_RCC_OscConfig+0x278>)
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fb86 	bl	8000da4 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff fb82 	bl	8000da4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e193      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d1f0      	bne.n	800169c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d036      	beq.n	8001734 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d016      	beq.n	80016fc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <HAL_RCC_OscConfig+0x27c>)
 80016d0:	2201      	movs	r2, #1
 80016d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fb66 	bl	8000da4 <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fb62 	bl	8000da4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e173      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x274>)
 80016f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0f0      	beq.n	80016dc <HAL_RCC_OscConfig+0x234>
 80016fa:	e01b      	b.n	8001734 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_OscConfig+0x27c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fb4f 	bl	8000da4 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001708:	e00e      	b.n	8001728 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800170a:	f7ff fb4b 	bl	8000da4 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d907      	bls.n	8001728 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e15c      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
 800171c:	40023800 	.word	0x40023800
 8001720:	42470000 	.word	0x42470000
 8001724:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001728:	4b8a      	ldr	r3, [pc, #552]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 800172a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1ea      	bne.n	800170a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 8097 	beq.w	8001870 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4b83      	ldr	r3, [pc, #524]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10f      	bne.n	8001772 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b7f      	ldr	r3, [pc, #508]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a7e      	ldr	r2, [pc, #504]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b7c      	ldr	r3, [pc, #496]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176e:	2301      	movs	r3, #1
 8001770:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001772:	4b79      	ldr	r3, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0x4b0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	2b00      	cmp	r3, #0
 800177c:	d118      	bne.n	80017b0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800177e:	4b76      	ldr	r3, [pc, #472]	; (8001958 <HAL_RCC_OscConfig+0x4b0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a75      	ldr	r2, [pc, #468]	; (8001958 <HAL_RCC_OscConfig+0x4b0>)
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178a:	f7ff fb0b 	bl	8000da4 <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001792:	f7ff fb07 	bl	8000da4 <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e118      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <HAL_RCC_OscConfig+0x4b0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0f0      	beq.n	8001792 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x31e>
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017bc:	4a65      	ldr	r2, [pc, #404]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6713      	str	r3, [r2, #112]	; 0x70
 80017c4:	e01c      	b.n	8001800 <HAL_RCC_OscConfig+0x358>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b05      	cmp	r3, #5
 80017cc:	d10c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x340>
 80017ce:	4b61      	ldr	r3, [pc, #388]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a60      	ldr	r2, [pc, #384]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
 80017da:	4b5e      	ldr	r3, [pc, #376]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017de:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6713      	str	r3, [r2, #112]	; 0x70
 80017e6:	e00b      	b.n	8001800 <HAL_RCC_OscConfig+0x358>
 80017e8:	4b5a      	ldr	r3, [pc, #360]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ec:	4a59      	ldr	r2, [pc, #356]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	; 0x70
 80017f4:	4b57      	ldr	r3, [pc, #348]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f8:	4a56      	ldr	r2, [pc, #344]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001808:	f7ff facc 	bl	8000da4 <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180e:	e00a      	b.n	8001826 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001810:	f7ff fac8 	bl	8000da4 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	f241 3288 	movw	r2, #5000	; 0x1388
 800181e:	4293      	cmp	r3, r2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e0d7      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001826:	4b4b      	ldr	r3, [pc, #300]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0ee      	beq.n	8001810 <HAL_RCC_OscConfig+0x368>
 8001832:	e014      	b.n	800185e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001834:	f7ff fab6 	bl	8000da4 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183a:	e00a      	b.n	8001852 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800183c:	f7ff fab2 	bl	8000da4 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	; 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e0c1      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001852:	4b40      	ldr	r3, [pc, #256]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 8001854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1ee      	bne.n	800183c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185e:	7dfb      	ldrb	r3, [r7, #23]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d105      	bne.n	8001870 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001864:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	4a3a      	ldr	r2, [pc, #232]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 800186a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800186e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80ad 	beq.w	80019d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	d060      	beq.n	8001948 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d145      	bne.n	800191a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <HAL_RCC_OscConfig+0x4b4>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001894:	f7ff fa86 	bl	8000da4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff fa82 	bl	8000da4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e093      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69da      	ldr	r2, [r3, #28]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c8:	019b      	lsls	r3, r3, #6
 80018ca:	431a      	orrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	085b      	lsrs	r3, r3, #1
 80018d2:	3b01      	subs	r3, #1
 80018d4:	041b      	lsls	r3, r3, #16
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e4:	071b      	lsls	r3, r3, #28
 80018e6:	491b      	ldr	r1, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4b4>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff fa57 	bl	8000da4 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff fa53 	bl	8000da4 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e064      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x452>
 8001918:	e05c      	b.n	80019d4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_RCC_OscConfig+0x4b4>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff fa40 	bl	8000da4 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff fa3c 	bl	8000da4 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b02      	cmp	r3, #2
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04d      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_RCC_OscConfig+0x4ac>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x480>
 8001946:	e045      	b.n	80019d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e040      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
 8001954:	40023800 	.word	0x40023800
 8001958:	40007000 	.word	0x40007000
 800195c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001960:	4b1f      	ldr	r3, [pc, #124]	; (80019e0 <HAL_RCC_OscConfig+0x538>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d030      	beq.n	80019d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001978:	429a      	cmp	r2, r3
 800197a:	d129      	bne.n	80019d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d122      	bne.n	80019d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001990:	4013      	ands	r3, r2
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001996:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001998:	4293      	cmp	r3, r2
 800199a:	d119      	bne.n	80019d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	085b      	lsrs	r3, r3, #1
 80019a8:	3b01      	subs	r3, #1
 80019aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d10f      	bne.n	80019d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d107      	bne.n	80019d0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3718      	adds	r7, #24
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e041      	b.n	8001a7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d106      	bne.n	8001a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f839 	bl	8001a82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2202      	movs	r2, #2
 8001a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3304      	adds	r3, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4610      	mov	r0, r2
 8001a24:	f000 f9d8 	bl	8001dd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d001      	beq.n	8001ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e04e      	b.n	8001b4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2202      	movs	r2, #2
 8001ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68da      	ldr	r2, [r3, #12]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a23      	ldr	r2, [pc, #140]	; (8001b5c <HAL_TIM_Base_Start_IT+0xc4>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d022      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ada:	d01d      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d018      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1e      	ldr	r2, [pc, #120]	; (8001b64 <HAL_TIM_Base_Start_IT+0xcc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00e      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_TIM_Base_Start_IT+0x80>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d111      	bne.n	8001b3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d010      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b3a:	e007      	b.n	8001b4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40010000 	.word	0x40010000
 8001b60:	40000400 	.word	0x40000400
 8001b64:	40000800 	.word	0x40000800
 8001b68:	40000c00 	.word	0x40000c00
 8001b6c:	40010400 	.word	0x40010400
 8001b70:	40014000 	.word	0x40014000
 8001b74:	40001800 	.word	0x40001800

08001b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0302 	and.w	r3, r3, #2
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0202 	mvn.w	r2, #2
 8001ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8ee 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f8e0 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8f1 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d122      	bne.n	8001c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d11b      	bne.n	8001c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0204 	mvn.w	r2, #4
 8001bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8c4 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001c14:	e005      	b.n	8001c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 f8b6 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f8c7 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d122      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0308 	and.w	r3, r3, #8
 8001c40:	2b08      	cmp	r3, #8
 8001c42:	d11b      	bne.n	8001c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f06f 0208 	mvn.w	r2, #8
 8001c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2204      	movs	r2, #4
 8001c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f89a 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001c68:	e005      	b.n	8001c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f000 f88c 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f89d 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b10      	cmp	r3, #16
 8001c88:	d122      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0310 	and.w	r3, r3, #16
 8001c94:	2b10      	cmp	r3, #16
 8001c96:	d11b      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0210 	mvn.w	r2, #16
 8001ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f870 	bl	8001d9c <HAL_TIM_IC_CaptureCallback>
 8001cbc:	e005      	b.n	8001cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f862 	bl	8001d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f873 	bl	8001db0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d10e      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0201 	mvn.w	r2, #1
 8001cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fefc 	bl	8000af4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d10e      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d14:	2b80      	cmp	r3, #128	; 0x80
 8001d16:	d107      	bne.n	8001d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f902 	bl	8001f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	2b40      	cmp	r3, #64	; 0x40
 8001d34:	d10e      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d40:	2b40      	cmp	r3, #64	; 0x40
 8001d42:	d107      	bne.n	8001d54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f838 	bl	8001dc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0320 	and.w	r3, r3, #32
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	d10e      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0320 	and.w	r3, r3, #32
 8001d6c:	2b20      	cmp	r3, #32
 8001d6e:	d107      	bne.n	8001d80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0220 	mvn.w	r2, #32
 8001d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8cc 	bl	8001f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d80:	bf00      	nop
 8001d82:	3708      	adds	r7, #8
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001da4:	bf00      	nop
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a40      	ldr	r2, [pc, #256]	; (8001eec <TIM_Base_SetConfig+0x114>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d013      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df6:	d00f      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3d      	ldr	r2, [pc, #244]	; (8001ef0 <TIM_Base_SetConfig+0x118>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d00b      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3c      	ldr	r2, [pc, #240]	; (8001ef4 <TIM_Base_SetConfig+0x11c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d007      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3b      	ldr	r2, [pc, #236]	; (8001ef8 <TIM_Base_SetConfig+0x120>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <TIM_Base_SetConfig+0x40>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3a      	ldr	r2, [pc, #232]	; (8001efc <TIM_Base_SetConfig+0x124>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d108      	bne.n	8001e2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <TIM_Base_SetConfig+0x114>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d02b      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d027      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2c      	ldr	r2, [pc, #176]	; (8001ef0 <TIM_Base_SetConfig+0x118>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d023      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2b      	ldr	r2, [pc, #172]	; (8001ef4 <TIM_Base_SetConfig+0x11c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01f      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <TIM_Base_SetConfig+0x120>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d01b      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a29      	ldr	r2, [pc, #164]	; (8001efc <TIM_Base_SetConfig+0x124>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d017      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <TIM_Base_SetConfig+0x128>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a27      	ldr	r2, [pc, #156]	; (8001f04 <TIM_Base_SetConfig+0x12c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00f      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a26      	ldr	r2, [pc, #152]	; (8001f08 <TIM_Base_SetConfig+0x130>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00b      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a25      	ldr	r2, [pc, #148]	; (8001f0c <TIM_Base_SetConfig+0x134>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <TIM_Base_SetConfig+0x138>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d003      	beq.n	8001e8a <TIM_Base_SetConfig+0xb2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <TIM_Base_SetConfig+0x13c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d108      	bne.n	8001e9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <TIM_Base_SetConfig+0x114>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d003      	beq.n	8001ed0 <TIM_Base_SetConfig+0xf8>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a0c      	ldr	r2, [pc, #48]	; (8001efc <TIM_Base_SetConfig+0x124>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d103      	bne.n	8001ed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	615a      	str	r2, [r3, #20]
}
 8001ede:	bf00      	nop
 8001ee0:	3714      	adds	r7, #20
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40010000 	.word	0x40010000
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40000800 	.word	0x40000800
 8001ef8:	40000c00 	.word	0x40000c00
 8001efc:	40010400 	.word	0x40010400
 8001f00:	40014000 	.word	0x40014000
 8001f04:	40014400 	.word	0x40014400
 8001f08:	40014800 	.word	0x40014800
 8001f0c:	40001800 	.word	0x40001800
 8001f10:	40001c00 	.word	0x40001c00
 8001f14:	40002000 	.word	0x40002000

08001f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <__NVIC_SetPriority>:
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	6039      	str	r1, [r7, #0]
 8001f4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	db0a      	blt.n	8001f6a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	490c      	ldr	r1, [pc, #48]	; (8001f8c <__NVIC_SetPriority+0x4c>)
 8001f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5e:	0112      	lsls	r2, r2, #4
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	440b      	add	r3, r1
 8001f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f68:	e00a      	b.n	8001f80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4908      	ldr	r1, [pc, #32]	; (8001f90 <__NVIC_SetPriority+0x50>)
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	3b04      	subs	r3, #4
 8001f78:	0112      	lsls	r2, r2, #4
 8001f7a:	b2d2      	uxtb	r2, r2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	761a      	strb	r2, [r3, #24]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000e100 	.word	0xe000e100
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Handler+0x1c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001f9c:	f001 fcfe 	bl	800399c <xTaskGetSchedulerState>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d001      	beq.n	8001faa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001fa6:	f002 fae7 	bl	8004578 <xPortSysTickHandler>
  }
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	f06f 0004 	mvn.w	r0, #4
 8001fbe:	f7ff ffbf 	bl	8001f40 <__NVIC_SetPriority>
#endif
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fce:	f3ef 8305 	mrs	r3, IPSR
 8001fd2:	603b      	str	r3, [r7, #0]
  return(result);
 8001fd4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001fda:	f06f 0305 	mvn.w	r3, #5
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	e00c      	b.n	8001ffc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	; (800200c <osKernelInitialize+0x44>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d105      	bne.n	8001ff6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001fea:	4b08      	ldr	r3, [pc, #32]	; (800200c <osKernelInitialize+0x44>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	e002      	b.n	8001ffc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ffc:	687b      	ldr	r3, [r7, #4]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000038 	.word	0x20000038

08002010 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002016:	f3ef 8305 	mrs	r3, IPSR
 800201a:	603b      	str	r3, [r7, #0]
  return(result);
 800201c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002022:	f06f 0305 	mvn.w	r3, #5
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	e010      	b.n	800204c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800202a:	4b0b      	ldr	r3, [pc, #44]	; (8002058 <osKernelStart+0x48>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d109      	bne.n	8002046 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002032:	f7ff ffbf 	bl	8001fb4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002036:	4b08      	ldr	r3, [pc, #32]	; (8002058 <osKernelStart+0x48>)
 8002038:	2202      	movs	r2, #2
 800203a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800203c:	f001 f866 	bl	800310c <vTaskStartScheduler>
      stat = osOK;
 8002040:	2300      	movs	r3, #0
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	e002      	b.n	800204c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002046:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800204a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000038 	.word	0x20000038

0800205c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800205c:	b580      	push	{r7, lr}
 800205e:	b08e      	sub	sp, #56	; 0x38
 8002060:	af04      	add	r7, sp, #16
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800206c:	f3ef 8305 	mrs	r3, IPSR
 8002070:	617b      	str	r3, [r7, #20]
  return(result);
 8002072:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002074:	2b00      	cmp	r3, #0
 8002076:	d17e      	bne.n	8002176 <osThreadNew+0x11a>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d07b      	beq.n	8002176 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002082:	2318      	movs	r3, #24
 8002084:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002086:	2300      	movs	r3, #0
 8002088:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800208e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d045      	beq.n	8002122 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d002      	beq.n	80020a4 <osThreadNew+0x48>
        name = attr->name;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d008      	beq.n	80020ca <osThreadNew+0x6e>
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	2b38      	cmp	r3, #56	; 0x38
 80020bc:	d805      	bhi.n	80020ca <osThreadNew+0x6e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <osThreadNew+0x72>
        return (NULL);
 80020ca:	2300      	movs	r3, #0
 80020cc:	e054      	b.n	8002178 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d003      	beq.n	80020de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	089b      	lsrs	r3, r3, #2
 80020dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00e      	beq.n	8002104 <osThreadNew+0xa8>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b5b      	cmp	r3, #91	; 0x5b
 80020ec:	d90a      	bls.n	8002104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d006      	beq.n	8002104 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <osThreadNew+0xa8>
        mem = 1;
 80020fe:	2301      	movs	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
 8002102:	e010      	b.n	8002126 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10c      	bne.n	8002126 <osThreadNew+0xca>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d108      	bne.n	8002126 <osThreadNew+0xca>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d104      	bne.n	8002126 <osThreadNew+0xca>
          mem = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
 8002120:	e001      	b.n	8002126 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d110      	bne.n	800214e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002134:	9202      	str	r2, [sp, #8]
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6a3a      	ldr	r2, [r7, #32]
 8002140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fe0c 	bl	8002d60 <xTaskCreateStatic>
 8002148:	4603      	mov	r3, r0
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e013      	b.n	8002176 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d110      	bne.n	8002176 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002154:	6a3b      	ldr	r3, [r7, #32]
 8002156:	b29a      	uxth	r2, r3
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002166:	68f8      	ldr	r0, [r7, #12]
 8002168:	f000 fe57 	bl	8002e1a <xTaskCreate>
 800216c:	4603      	mov	r3, r0
 800216e:	2b01      	cmp	r3, #1
 8002170:	d001      	beq.n	8002176 <osThreadNew+0x11a>
            hTask = NULL;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002176:	693b      	ldr	r3, [r7, #16]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002188:	f3ef 8305 	mrs	r3, IPSR
 800218c:	60bb      	str	r3, [r7, #8]
  return(result);
 800218e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <osDelay+0x1c>
    stat = osErrorISR;
 8002194:	f06f 0305 	mvn.w	r3, #5
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	e007      	b.n	80021ac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800219c:	2300      	movs	r3, #0
 800219e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d002      	beq.n	80021ac <osDelay+0x2c>
      vTaskDelay(ticks);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 ff7c 	bl	80030a4 <vTaskDelay>
    }
  }

  return (stat);
 80021ac:	68fb      	ldr	r3, [r7, #12]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
	...

080021b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80021c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <vApplicationGetIdleTaskMemory+0x30>)
 80021ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2280      	movs	r2, #128	; 0x80
 80021d4:	601a      	str	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000003c 	.word	0x2000003c
 80021e8:	20000098 	.word	0x20000098

080021ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a07      	ldr	r2, [pc, #28]	; (8002218 <vApplicationGetTimerTaskMemory+0x2c>)
 80021fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4a06      	ldr	r2, [pc, #24]	; (800221c <vApplicationGetTimerTaskMemory+0x30>)
 8002202:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f44f 7280 	mov.w	r2, #256	; 0x100
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	20000298 	.word	0x20000298
 800221c:	200002f4 	.word	0x200002f4

08002220 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f103 0208 	add.w	r2, r3, #8
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002238:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f103 0208 	add.w	r2, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f103 0208 	add.w	r2, r3, #8
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr

0800227a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800227a:	b480      	push	{r7}
 800227c:	b085      	sub	sp, #20
 800227e:	af00      	add	r7, sp, #0
 8002280:	6078      	str	r0, [r7, #4]
 8002282:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	601a      	str	r2, [r3, #0]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80022c2:	b480      	push	{r7}
 80022c4:	b085      	sub	sp, #20
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
 80022ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022d8:	d103      	bne.n	80022e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e00c      	b.n	80022fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3308      	adds	r3, #8
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	e002      	b.n	80022f0 <vListInsert+0x2e>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d2f6      	bcs.n	80022ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685a      	ldr	r2, [r3, #4]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	601a      	str	r2, [r3, #0]
}
 8002328:	bf00      	nop
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6892      	ldr	r2, [r2, #8]
 800234a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6852      	ldr	r2, [r2, #4]
 8002354:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d103      	bne.n	8002368 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d10a      	bne.n	80023b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800239c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a0:	f383 8811 	msr	BASEPRI, r3
 80023a4:	f3bf 8f6f 	isb	sy
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80023ae:	bf00      	nop
 80023b0:	e7fe      	b.n	80023b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80023b2:	f002 f84f 	bl	8004454 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	68f9      	ldr	r1, [r7, #12]
 80023c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	441a      	add	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e2:	3b01      	subs	r3, #1
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80023e8:	fb01 f303 	mul.w	r3, r1, r3
 80023ec:	441a      	add	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	22ff      	movs	r2, #255	; 0xff
 80023f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	22ff      	movs	r2, #255	; 0xff
 80023fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d114      	bne.n	8002432 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d01a      	beq.n	8002446 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	3310      	adds	r3, #16
 8002414:	4618      	mov	r0, r3
 8002416:	f001 f903 	bl	8003620 <xTaskRemoveFromEventList>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d012      	beq.n	8002446 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <xQueueGenericReset+0xcc>)
 8002422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	e009      	b.n	8002446 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	3310      	adds	r3, #16
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fef2 	bl	8002220 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3324      	adds	r3, #36	; 0x24
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff feed 	bl	8002220 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002446:	f002 f835 	bl	80044b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	e000ed04 	.word	0xe000ed04

08002458 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08e      	sub	sp, #56	; 0x38
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
 8002464:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10a      	bne.n	800249e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
}
 800249a:	bf00      	nop
 800249c:	e7fe      	b.n	800249c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <xQueueGenericCreateStatic+0x52>
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <xQueueGenericCreateStatic+0x56>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <xQueueGenericCreateStatic+0x58>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80024b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b8:	f383 8811 	msr	BASEPRI, r3
 80024bc:	f3bf 8f6f 	isb	sy
 80024c0:	f3bf 8f4f 	dsb	sy
 80024c4:	623b      	str	r3, [r7, #32]
}
 80024c6:	bf00      	nop
 80024c8:	e7fe      	b.n	80024c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <xQueueGenericCreateStatic+0x7e>
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <xQueueGenericCreateStatic+0x82>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <xQueueGenericCreateStatic+0x84>
 80024da:	2300      	movs	r3, #0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d10a      	bne.n	80024f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80024e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e4:	f383 8811 	msr	BASEPRI, r3
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	f3bf 8f4f 	dsb	sy
 80024f0:	61fb      	str	r3, [r7, #28]
}
 80024f2:	bf00      	nop
 80024f4:	e7fe      	b.n	80024f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80024f6:	2350      	movs	r3, #80	; 0x50
 80024f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b50      	cmp	r3, #80	; 0x50
 80024fe:	d00a      	beq.n	8002516 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	61bb      	str	r3, [r7, #24]
}
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002516:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800251c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00d      	beq.n	800253e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800252a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	4613      	mov	r3, r2
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68b9      	ldr	r1, [r7, #8]
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f805 	bl	8002548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002540:	4618      	mov	r0, r3
 8002542:	3730      	adds	r7, #48	; 0x30
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d103      	bne.n	8002564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e002      	b.n	800256a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002576:	2101      	movs	r1, #1
 8002578:	69b8      	ldr	r0, [r7, #24]
 800257a:	f7ff ff05 	bl	8002388 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b08e      	sub	sp, #56	; 0x38
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800259e:	2300      	movs	r3, #0
 80025a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80025a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericSend+0x32>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d103      	bne.n	80025d0 <xQueueGenericSend+0x40>
 80025c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <xQueueGenericSend+0x44>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <xQueueGenericSend+0x46>
 80025d4:	2300      	movs	r3, #0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d10a      	bne.n	80025f0 <xQueueGenericSend+0x60>
	__asm volatile
 80025da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025de:	f383 8811 	msr	BASEPRI, r3
 80025e2:	f3bf 8f6f 	isb	sy
 80025e6:	f3bf 8f4f 	dsb	sy
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025ec:	bf00      	nop
 80025ee:	e7fe      	b.n	80025ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d103      	bne.n	80025fe <xQueueGenericSend+0x6e>
 80025f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <xQueueGenericSend+0x72>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <xQueueGenericSend+0x74>
 8002602:	2300      	movs	r3, #0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10a      	bne.n	800261e <xQueueGenericSend+0x8e>
	__asm volatile
 8002608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800260c:	f383 8811 	msr	BASEPRI, r3
 8002610:	f3bf 8f6f 	isb	sy
 8002614:	f3bf 8f4f 	dsb	sy
 8002618:	623b      	str	r3, [r7, #32]
}
 800261a:	bf00      	nop
 800261c:	e7fe      	b.n	800261c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800261e:	f001 f9bd 	bl	800399c <xTaskGetSchedulerState>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <xQueueGenericSend+0x9e>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <xQueueGenericSend+0xa2>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <xQueueGenericSend+0xa4>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10a      	bne.n	800264e <xQueueGenericSend+0xbe>
	__asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	61fb      	str	r3, [r7, #28]
}
 800264a:	bf00      	nop
 800264c:	e7fe      	b.n	800264c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800264e:	f001 ff01 	bl	8004454 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265a:	429a      	cmp	r2, r3
 800265c:	d302      	bcc.n	8002664 <xQueueGenericSend+0xd4>
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d129      	bne.n	80026b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	68b9      	ldr	r1, [r7, #8]
 8002668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266a:	f000 fa0b 	bl	8002a84 <prvCopyDataToQueue>
 800266e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d010      	beq.n	800269a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	3324      	adds	r3, #36	; 0x24
 800267c:	4618      	mov	r0, r3
 800267e:	f000 ffcf 	bl	8003620 <xTaskRemoveFromEventList>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002688:	4b3f      	ldr	r3, [pc, #252]	; (8002788 <xQueueGenericSend+0x1f8>)
 800268a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	e00a      	b.n	80026b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d007      	beq.n	80026b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80026a0:	4b39      	ldr	r3, [pc, #228]	; (8002788 <xQueueGenericSend+0x1f8>)
 80026a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80026b0:	f001 ff00 	bl	80044b4 <vPortExitCritical>
				return pdPASS;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e063      	b.n	8002780 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d103      	bne.n	80026c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80026be:	f001 fef9 	bl	80044b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e05c      	b.n	8002780 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80026c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80026cc:	f107 0314 	add.w	r3, r7, #20
 80026d0:	4618      	mov	r0, r3
 80026d2:	f001 f809 	bl	80036e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80026d6:	2301      	movs	r3, #1
 80026d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80026da:	f001 feeb 	bl	80044b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80026de:	f000 fd7b 	bl	80031d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80026e2:	f001 feb7 	bl	8004454 <vPortEnterCritical>
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80026ec:	b25b      	sxtb	r3, r3
 80026ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026f2:	d103      	bne.n	80026fc <xQueueGenericSend+0x16c>
 80026f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002702:	b25b      	sxtb	r3, r3
 8002704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002708:	d103      	bne.n	8002712 <xQueueGenericSend+0x182>
 800270a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002712:	f001 fecf 	bl	80044b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002716:	1d3a      	adds	r2, r7, #4
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fff8 	bl	8003714 <xTaskCheckForTimeOut>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d124      	bne.n	8002774 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800272a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800272c:	f000 faa2 	bl	8002c74 <prvIsQueueFull>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	3310      	adds	r3, #16
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f000 ff1e 	bl	8003580 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002746:	f000 fa2d 	bl	8002ba4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800274a:	f000 fd53 	bl	80031f4 <xTaskResumeAll>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af7c 	bne.w	800264e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <xQueueGenericSend+0x1f8>)
 8002758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	f3bf 8f6f 	isb	sy
 8002766:	e772      	b.n	800264e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800276a:	f000 fa1b 	bl	8002ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800276e:	f000 fd41 	bl	80031f4 <xTaskResumeAll>
 8002772:	e76c      	b.n	800264e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002776:	f000 fa15 	bl	8002ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800277a:	f000 fd3b 	bl	80031f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800277e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002780:	4618      	mov	r0, r3
 8002782:	3738      	adds	r7, #56	; 0x38
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	e000ed04 	.word	0xe000ed04

0800278c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b090      	sub	sp, #64	; 0x40
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80027a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027a8:	f383 8811 	msr	BASEPRI, r3
 80027ac:	f3bf 8f6f 	isb	sy
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027b6:	bf00      	nop
 80027b8:	e7fe      	b.n	80027b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <xQueueGenericSendFromISR+0x3c>
 80027c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <xQueueGenericSendFromISR+0x40>
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <xQueueGenericSendFromISR+0x42>
 80027cc:	2300      	movs	r3, #0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80027d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d6:	f383 8811 	msr	BASEPRI, r3
 80027da:	f3bf 8f6f 	isb	sy
 80027de:	f3bf 8f4f 	dsb	sy
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027e4:	bf00      	nop
 80027e6:	e7fe      	b.n	80027e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d103      	bne.n	80027f6 <xQueueGenericSendFromISR+0x6a>
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <xQueueGenericSendFromISR+0x6e>
 80027f6:	2301      	movs	r3, #1
 80027f8:	e000      	b.n	80027fc <xQueueGenericSendFromISR+0x70>
 80027fa:	2300      	movs	r3, #0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	623b      	str	r3, [r7, #32]
}
 8002812:	bf00      	nop
 8002814:	e7fe      	b.n	8002814 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002816:	f001 feff 	bl	8004618 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800281a:	f3ef 8211 	mrs	r2, BASEPRI
 800281e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002822:	f383 8811 	msr	BASEPRI, r3
 8002826:	f3bf 8f6f 	isb	sy
 800282a:	f3bf 8f4f 	dsb	sy
 800282e:	61fa      	str	r2, [r7, #28]
 8002830:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002832:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002834:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800283a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	429a      	cmp	r2, r3
 8002840:	d302      	bcc.n	8002848 <xQueueGenericSendFromISR+0xbc>
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d12f      	bne.n	80028a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800284e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800285e:	f000 f911 	bl	8002a84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002862:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800286a:	d112      	bne.n	8002892 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800286c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d016      	beq.n	80028a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002876:	3324      	adds	r3, #36	; 0x24
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fed1 	bl	8003620 <xTaskRemoveFromEventList>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00b      	beq.n	80028a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	e007      	b.n	80028a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002896:	3301      	adds	r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	b25a      	sxtb	r2, r3
 800289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800289e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80028a2:	2301      	movs	r3, #1
 80028a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80028a6:	e001      	b.n	80028ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80028b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80028b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3740      	adds	r7, #64	; 0x40
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80028d0:	2300      	movs	r3, #0
 80028d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80028d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10a      	bne.n	80028f4 <xQueueReceive+0x30>
	__asm volatile
 80028de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e2:	f383 8811 	msr	BASEPRI, r3
 80028e6:	f3bf 8f6f 	isb	sy
 80028ea:	f3bf 8f4f 	dsb	sy
 80028ee:	623b      	str	r3, [r7, #32]
}
 80028f0:	bf00      	nop
 80028f2:	e7fe      	b.n	80028f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d103      	bne.n	8002902 <xQueueReceive+0x3e>
 80028fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <xQueueReceive+0x42>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <xQueueReceive+0x44>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <xQueueReceive+0x5e>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	61fb      	str	r3, [r7, #28]
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002922:	f001 f83b 	bl	800399c <xTaskGetSchedulerState>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d102      	bne.n	8002932 <xQueueReceive+0x6e>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <xQueueReceive+0x72>
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <xQueueReceive+0x74>
 8002936:	2300      	movs	r3, #0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10a      	bne.n	8002952 <xQueueReceive+0x8e>
	__asm volatile
 800293c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002940:	f383 8811 	msr	BASEPRI, r3
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	61bb      	str	r3, [r7, #24]
}
 800294e:	bf00      	nop
 8002950:	e7fe      	b.n	8002950 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002952:	f001 fd7f 	bl	8004454 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	2b00      	cmp	r3, #0
 8002960:	d01f      	beq.n	80029a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002966:	f000 f8f7 	bl	8002b58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	1e5a      	subs	r2, r3, #1
 800296e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00f      	beq.n	800299a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800297a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800297c:	3310      	adds	r3, #16
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fe4e 	bl	8003620 <xTaskRemoveFromEventList>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d007      	beq.n	800299a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800298a:	4b3d      	ldr	r3, [pc, #244]	; (8002a80 <xQueueReceive+0x1bc>)
 800298c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f3bf 8f4f 	dsb	sy
 8002996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800299a:	f001 fd8b 	bl	80044b4 <vPortExitCritical>
				return pdPASS;
 800299e:	2301      	movs	r3, #1
 80029a0:	e069      	b.n	8002a76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029a8:	f001 fd84 	bl	80044b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e062      	b.n	8002a76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029b6:	f107 0310 	add.w	r3, r7, #16
 80029ba:	4618      	mov	r0, r3
 80029bc:	f000 fe94 	bl	80036e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029c0:	2301      	movs	r3, #1
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029c4:	f001 fd76 	bl	80044b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80029c8:	f000 fc06 	bl	80031d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029cc:	f001 fd42 	bl	8004454 <vPortEnterCritical>
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029d6:	b25b      	sxtb	r3, r3
 80029d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029dc:	d103      	bne.n	80029e6 <xQueueReceive+0x122>
 80029de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ec:	b25b      	sxtb	r3, r3
 80029ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f2:	d103      	bne.n	80029fc <xQueueReceive+0x138>
 80029f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029f6:	2200      	movs	r2, #0
 80029f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80029fc:	f001 fd5a 	bl	80044b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a00:	1d3a      	adds	r2, r7, #4
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f000 fe83 	bl	8003714 <xTaskCheckForTimeOut>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d123      	bne.n	8002a5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a16:	f000 f917 	bl	8002c48 <prvIsQueueEmpty>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d017      	beq.n	8002a50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 fda9 	bl	8003580 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a30:	f000 f8b8 	bl	8002ba4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a34:	f000 fbde 	bl	80031f4 <xTaskResumeAll>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d189      	bne.n	8002952 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <xQueueReceive+0x1bc>)
 8002a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	e780      	b.n	8002952 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002a50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a52:	f000 f8a7 	bl	8002ba4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a56:	f000 fbcd 	bl	80031f4 <xTaskResumeAll>
 8002a5a:	e77a      	b.n	8002952 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a5e:	f000 f8a1 	bl	8002ba4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a62:	f000 fbc7 	bl	80031f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a68:	f000 f8ee 	bl	8002c48 <prvIsQueueEmpty>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f43f af6f 	beq.w	8002952 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002a74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3730      	adds	r7, #48	; 0x30
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10d      	bne.n	8002abe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d14d      	bne.n	8002b46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f000 ff92 	bl	80039d8 <xTaskPriorityDisinherit>
 8002ab4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e043      	b.n	8002b46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d119      	bne.n	8002af8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6858      	ldr	r0, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	461a      	mov	r2, r3
 8002ace:	68b9      	ldr	r1, [r7, #8]
 8002ad0:	f001 fff0 	bl	8004ab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	441a      	add	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	685a      	ldr	r2, [r3, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d32b      	bcc.n	8002b46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	e026      	b.n	8002b46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68d8      	ldr	r0, [r3, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	461a      	mov	r2, r3
 8002b02:	68b9      	ldr	r1, [r7, #8]
 8002b04:	f001 ffd6 	bl	8004ab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	68da      	ldr	r2, [r3, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b10:	425b      	negs	r3, r3
 8002b12:	441a      	add	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d207      	bcs.n	8002b34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	425b      	negs	r3, r3
 8002b2e:	441a      	add	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d105      	bne.n	8002b46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d002      	beq.n	8002b46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002b4e:	697b      	ldr	r3, [r7, #20]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d018      	beq.n	8002b9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	441a      	add	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68da      	ldr	r2, [r3, #12]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d303      	bcc.n	8002b8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	68d9      	ldr	r1, [r3, #12]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	461a      	mov	r2, r3
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	f001 ff8c 	bl	8004ab4 <memcpy>
	}
}
 8002b9c:	bf00      	nop
 8002b9e:	3708      	adds	r7, #8
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002bac:	f001 fc52 	bl	8004454 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bb8:	e011      	b.n	8002bde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d012      	beq.n	8002be8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	3324      	adds	r3, #36	; 0x24
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fd2a 	bl	8003620 <xTaskRemoveFromEventList>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002bd2:	f000 fe01 	bl	80037d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	dce9      	bgt.n	8002bba <prvUnlockQueue+0x16>
 8002be6:	e000      	b.n	8002bea <prvUnlockQueue+0x46>
					break;
 8002be8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	22ff      	movs	r2, #255	; 0xff
 8002bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002bf2:	f001 fc5f 	bl	80044b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002bf6:	f001 fc2d 	bl	8004454 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c02:	e011      	b.n	8002c28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d012      	beq.n	8002c32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3310      	adds	r3, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 fd05 	bl	8003620 <xTaskRemoveFromEventList>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002c1c:	f000 fddc 	bl	80037d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002c20:	7bbb      	ldrb	r3, [r7, #14]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	dce9      	bgt.n	8002c04 <prvUnlockQueue+0x60>
 8002c30:	e000      	b.n	8002c34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002c32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002c3c:	f001 fc3a 	bl	80044b4 <vPortExitCritical>
}
 8002c40:	bf00      	nop
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c50:	f001 fc00 	bl	8004454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d102      	bne.n	8002c62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e001      	b.n	8002c66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002c62:	2300      	movs	r3, #0
 8002c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c66:	f001 fc25 	bl	80044b4 <vPortExitCritical>

	return xReturn;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002c7c:	f001 fbea 	bl	8004454 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d102      	bne.n	8002c92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e001      	b.n	8002c96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002c96:	f001 fc0d 	bl	80044b4 <vPortExitCritical>

	return xReturn;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
 8002cb2:	e014      	b.n	8002cde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cb4:	4a0f      	ldr	r2, [pc, #60]	; (8002cf4 <vQueueAddToRegistry+0x50>)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cc0:	490c      	ldr	r1, [pc, #48]	; (8002cf4 <vQueueAddToRegistry+0x50>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <vQueueAddToRegistry+0x50>)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002cd6:	e006      	b.n	8002ce6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b07      	cmp	r3, #7
 8002ce2:	d9e7      	bls.n	8002cb4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3714      	adds	r7, #20
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20005d08 	.word	0x20005d08

08002cf8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002d08:	f001 fba4 	bl	8004454 <vPortEnterCritical>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d18:	d103      	bne.n	8002d22 <vQueueWaitForMessageRestricted+0x2a>
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d28:	b25b      	sxtb	r3, r3
 8002d2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d2e:	d103      	bne.n	8002d38 <vQueueWaitForMessageRestricted+0x40>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d38:	f001 fbbc 	bl	80044b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d106      	bne.n	8002d52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3324      	adds	r3, #36	; 0x24
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f000 fc3b 	bl	80035c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff26 	bl	8002ba4 <prvUnlockQueue>
	}
 8002d58:	bf00      	nop
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08e      	sub	sp, #56	; 0x38
 8002d64:	af04      	add	r7, sp, #16
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10a      	bne.n	8002d8a <xTaskCreateStatic+0x2a>
	__asm volatile
 8002d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d78:	f383 8811 	msr	BASEPRI, r3
 8002d7c:	f3bf 8f6f 	isb	sy
 8002d80:	f3bf 8f4f 	dsb	sy
 8002d84:	623b      	str	r3, [r7, #32]
}
 8002d86:	bf00      	nop
 8002d88:	e7fe      	b.n	8002d88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61fb      	str	r3, [r7, #28]
}
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002da6:	235c      	movs	r3, #92	; 0x5c
 8002da8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b5c      	cmp	r3, #92	; 0x5c
 8002dae:	d00a      	beq.n	8002dc6 <xTaskCreateStatic+0x66>
	__asm volatile
 8002db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002db4:	f383 8811 	msr	BASEPRI, r3
 8002db8:	f3bf 8f6f 	isb	sy
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	61bb      	str	r3, [r7, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	e7fe      	b.n	8002dc4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002dc6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d01e      	beq.n	8002e0c <xTaskCreateStatic+0xac>
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d01b      	beq.n	8002e0c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	2202      	movs	r2, #2
 8002de2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002de6:	2300      	movs	r3, #0
 8002de8:	9303      	str	r3, [sp, #12]
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	9302      	str	r3, [sp, #8]
 8002dee:	f107 0314 	add.w	r3, r7, #20
 8002df2:	9301      	str	r3, [sp, #4]
 8002df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	68b9      	ldr	r1, [r7, #8]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f850 	bl	8002ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e06:	f000 f8dd 	bl	8002fc4 <prvAddNewTaskToReadyList>
 8002e0a:	e001      	b.n	8002e10 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002e10:	697b      	ldr	r3, [r7, #20]
	}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b08c      	sub	sp, #48	; 0x30
 8002e1e:	af04      	add	r7, sp, #16
 8002e20:	60f8      	str	r0, [r7, #12]
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	603b      	str	r3, [r7, #0]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f001 fc32 	bl	8004698 <pvPortMalloc>
 8002e34:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e3c:	205c      	movs	r0, #92	; 0x5c
 8002e3e:	f001 fc2b 	bl	8004698 <pvPortMalloc>
 8002e42:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
 8002e50:	e005      	b.n	8002e5e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f001 fcec 	bl	8004830 <vPortFree>
 8002e58:	e001      	b.n	8002e5e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d017      	beq.n	8002e94 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e6c:	88fa      	ldrh	r2, [r7, #6]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9303      	str	r3, [sp, #12]
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	9302      	str	r3, [sp, #8]
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f80e 	bl	8002ea4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002e88:	69f8      	ldr	r0, [r7, #28]
 8002e8a:	f000 f89b 	bl	8002fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	61bb      	str	r3, [r7, #24]
 8002e92:	e002      	b.n	8002e9a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002e98:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002e9a:	69bb      	ldr	r3, [r7, #24]
	}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3720      	adds	r7, #32
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	461a      	mov	r2, r3
 8002ebc:	21a5      	movs	r1, #165	; 0xa5
 8002ebe:	f001 fe07 	bl	8004ad0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f023 0307 	bic.w	r3, r3, #7
 8002eda:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00a      	beq.n	8002efc <prvInitialiseNewTask+0x58>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	617b      	str	r3, [r7, #20]
}
 8002ef8:	bf00      	nop
 8002efa:	e7fe      	b.n	8002efa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01f      	beq.n	8002f42 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f02:	2300      	movs	r3, #0
 8002f04:	61fb      	str	r3, [r7, #28]
 8002f06:	e012      	b.n	8002f2e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002f08:	68ba      	ldr	r2, [r7, #8]
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	7819      	ldrb	r1, [r3, #0]
 8002f10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	4413      	add	r3, r2
 8002f16:	3334      	adds	r3, #52	; 0x34
 8002f18:	460a      	mov	r2, r1
 8002f1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	4413      	add	r3, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d006      	beq.n	8002f36 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	61fb      	str	r3, [r7, #28]
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d9e9      	bls.n	8002f08 <prvInitialiseNewTask+0x64>
 8002f34:	e000      	b.n	8002f38 <prvInitialiseNewTask+0x94>
			{
				break;
 8002f36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f40:	e003      	b.n	8002f4a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	2b37      	cmp	r3, #55	; 0x37
 8002f4e:	d901      	bls.n	8002f54 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f50:	2337      	movs	r3, #55	; 0x37
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	2200      	movs	r2, #0
 8002f64:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f68:	3304      	adds	r3, #4
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff f978 	bl	8002260 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f72:	3318      	adds	r3, #24
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f973 	bl	8002260 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f9e:	683a      	ldr	r2, [r7, #0]
 8002fa0:	68f9      	ldr	r1, [r7, #12]
 8002fa2:	69b8      	ldr	r0, [r7, #24]
 8002fa4:	f001 f928 	bl	80041f8 <pxPortInitialiseStack>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fba:	bf00      	nop
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002fcc:	f001 fa42 	bl	8004454 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002fd0:	4b2d      	ldr	r3, [pc, #180]	; (8003088 <prvAddNewTaskToReadyList+0xc4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a2c      	ldr	r2, [pc, #176]	; (8003088 <prvAddNewTaskToReadyList+0xc4>)
 8002fd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002fda:	4b2c      	ldr	r3, [pc, #176]	; (800308c <prvAddNewTaskToReadyList+0xc8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <prvAddNewTaskToReadyList+0xc8>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fe8:	4b27      	ldr	r3, [pc, #156]	; (8003088 <prvAddNewTaskToReadyList+0xc4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d110      	bne.n	8003012 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ff0:	f000 fc16 	bl	8003820 <prvInitialiseTaskLists>
 8002ff4:	e00d      	b.n	8003012 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ff6:	4b26      	ldr	r3, [pc, #152]	; (8003090 <prvAddNewTaskToReadyList+0xcc>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ffe:	4b23      	ldr	r3, [pc, #140]	; (800308c <prvAddNewTaskToReadyList+0xc8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	429a      	cmp	r2, r3
 800300a:	d802      	bhi.n	8003012 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800300c:	4a1f      	ldr	r2, [pc, #124]	; (800308c <prvAddNewTaskToReadyList+0xc8>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <prvAddNewTaskToReadyList+0xd0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4a1e      	ldr	r2, [pc, #120]	; (8003094 <prvAddNewTaskToReadyList+0xd0>)
 800301a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <prvAddNewTaskToReadyList+0xd0>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <prvAddNewTaskToReadyList+0xd4>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	d903      	bls.n	8003038 <prvAddNewTaskToReadyList+0x74>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	4a18      	ldr	r2, [pc, #96]	; (8003098 <prvAddNewTaskToReadyList+0xd4>)
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4a15      	ldr	r2, [pc, #84]	; (800309c <prvAddNewTaskToReadyList+0xd8>)
 8003046:	441a      	add	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3304      	adds	r3, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4610      	mov	r0, r2
 8003050:	f7ff f913 	bl	800227a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003054:	f001 fa2e 	bl	80044b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003058:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <prvAddNewTaskToReadyList+0xcc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00e      	beq.n	800307e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003060:	4b0a      	ldr	r3, [pc, #40]	; (800308c <prvAddNewTaskToReadyList+0xc8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306a:	429a      	cmp	r2, r3
 800306c:	d207      	bcs.n	800307e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800306e:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <prvAddNewTaskToReadyList+0xdc>)
 8003070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	20000bc8 	.word	0x20000bc8
 800308c:	200006f4 	.word	0x200006f4
 8003090:	20000bd4 	.word	0x20000bd4
 8003094:	20000be4 	.word	0x20000be4
 8003098:	20000bd0 	.word	0x20000bd0
 800309c:	200006f8 	.word	0x200006f8
 80030a0:	e000ed04 	.word	0xe000ed04

080030a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d017      	beq.n	80030e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <vTaskDelay+0x60>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <vTaskDelay+0x30>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	60bb      	str	r3, [r7, #8]
}
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030d4:	f000 f880 	bl	80031d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030d8:	2100      	movs	r1, #0
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fcea 	bl	8003ab4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030e0:	f000 f888 	bl	80031f4 <xTaskResumeAll>
 80030e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d107      	bne.n	80030fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <vTaskDelay+0x64>)
 80030ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	20000bf0 	.word	0x20000bf0
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800311a:	463a      	mov	r2, r7
 800311c:	1d39      	adds	r1, r7, #4
 800311e:	f107 0308 	add.w	r3, r7, #8
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff f848 	bl	80021b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003128:	6839      	ldr	r1, [r7, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	9202      	str	r2, [sp, #8]
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	2300      	movs	r3, #0
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2300      	movs	r3, #0
 8003138:	460a      	mov	r2, r1
 800313a:	4921      	ldr	r1, [pc, #132]	; (80031c0 <vTaskStartScheduler+0xb4>)
 800313c:	4821      	ldr	r0, [pc, #132]	; (80031c4 <vTaskStartScheduler+0xb8>)
 800313e:	f7ff fe0f 	bl	8002d60 <xTaskCreateStatic>
 8003142:	4603      	mov	r3, r0
 8003144:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <vTaskStartScheduler+0xbc>)
 8003146:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003148:	4b1f      	ldr	r3, [pc, #124]	; (80031c8 <vTaskStartScheduler+0xbc>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003150:	2301      	movs	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	e001      	b.n	800315a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d102      	bne.n	8003166 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003160:	f000 fcfc 	bl	8003b5c <xTimerCreateTimerTask>
 8003164:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d116      	bne.n	800319a <vTaskStartScheduler+0x8e>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	613b      	str	r3, [r7, #16]
}
 800317e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <vTaskStartScheduler+0xc0>)
 8003182:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003186:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003188:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <vTaskStartScheduler+0xc4>)
 800318a:	2201      	movs	r2, #1
 800318c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800318e:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <vTaskStartScheduler+0xc8>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003194:	f001 f8bc 	bl	8004310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003198:	e00e      	b.n	80031b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031a0:	d10a      	bne.n	80031b8 <vTaskStartScheduler+0xac>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	60fb      	str	r3, [r7, #12]
}
 80031b4:	bf00      	nop
 80031b6:	e7fe      	b.n	80031b6 <vTaskStartScheduler+0xaa>
}
 80031b8:	bf00      	nop
 80031ba:	3718      	adds	r7, #24
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	08004b04 	.word	0x08004b04
 80031c4:	080037f1 	.word	0x080037f1
 80031c8:	20000bec 	.word	0x20000bec
 80031cc:	20000be8 	.word	0x20000be8
 80031d0:	20000bd4 	.word	0x20000bd4
 80031d4:	20000bcc 	.word	0x20000bcc

080031d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031dc:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <vTaskSuspendAll+0x18>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3301      	adds	r3, #1
 80031e2:	4a03      	ldr	r2, [pc, #12]	; (80031f0 <vTaskSuspendAll+0x18>)
 80031e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	20000bf0 	.word	0x20000bf0

080031f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <xTaskResumeAll+0x118>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <xTaskResumeAll+0x2c>
	__asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	603b      	str	r3, [r7, #0]
}
 800321c:	bf00      	nop
 800321e:	e7fe      	b.n	800321e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003220:	f001 f918 	bl	8004454 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003224:	4b39      	ldr	r3, [pc, #228]	; (800330c <xTaskResumeAll+0x118>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	4a38      	ldr	r2, [pc, #224]	; (800330c <xTaskResumeAll+0x118>)
 800322c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <xTaskResumeAll+0x118>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d162      	bne.n	80032fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003236:	4b36      	ldr	r3, [pc, #216]	; (8003310 <xTaskResumeAll+0x11c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d05e      	beq.n	80032fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800323e:	e02f      	b.n	80032a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003240:	4b34      	ldr	r3, [pc, #208]	; (8003314 <xTaskResumeAll+0x120>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3318      	adds	r3, #24
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f871 	bl	8002334 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	3304      	adds	r3, #4
 8003256:	4618      	mov	r0, r3
 8003258:	f7ff f86c 	bl	8002334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003260:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <xTaskResumeAll+0x124>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d903      	bls.n	8003270 <xTaskResumeAll+0x7c>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <xTaskResumeAll+0x124>)
 800326e:	6013      	str	r3, [r2, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4613      	mov	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4a27      	ldr	r2, [pc, #156]	; (800331c <xTaskResumeAll+0x128>)
 800327e:	441a      	add	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3304      	adds	r3, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4610      	mov	r0, r2
 8003288:	f7fe fff7 	bl	800227a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003290:	4b23      	ldr	r3, [pc, #140]	; (8003320 <xTaskResumeAll+0x12c>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	429a      	cmp	r2, r3
 8003298:	d302      	bcc.n	80032a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <xTaskResumeAll+0x130>)
 800329c:	2201      	movs	r2, #1
 800329e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032a0:	4b1c      	ldr	r3, [pc, #112]	; (8003314 <xTaskResumeAll+0x120>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1cb      	bne.n	8003240 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80032ae:	f000 fb55 	bl	800395c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <xTaskResumeAll+0x134>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d010      	beq.n	80032e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032be:	f000 f847 	bl	8003350 <xTaskIncrementTick>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80032c8:	4b16      	ldr	r3, [pc, #88]	; (8003324 <xTaskResumeAll+0x130>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f1      	bne.n	80032be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <xTaskResumeAll+0x134>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032e0:	4b10      	ldr	r3, [pc, #64]	; (8003324 <xTaskResumeAll+0x130>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d009      	beq.n	80032fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032e8:	2301      	movs	r3, #1
 80032ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032ec:	4b0f      	ldr	r3, [pc, #60]	; (800332c <xTaskResumeAll+0x138>)
 80032ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032fc:	f001 f8da 	bl	80044b4 <vPortExitCritical>

	return xAlreadyYielded;
 8003300:	68bb      	ldr	r3, [r7, #8]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	20000bf0 	.word	0x20000bf0
 8003310:	20000bc8 	.word	0x20000bc8
 8003314:	20000b88 	.word	0x20000b88
 8003318:	20000bd0 	.word	0x20000bd0
 800331c:	200006f8 	.word	0x200006f8
 8003320:	200006f4 	.word	0x200006f4
 8003324:	20000bdc 	.word	0x20000bdc
 8003328:	20000bd8 	.word	0x20000bd8
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <xTaskGetTickCount+0x1c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800333c:	687b      	ldr	r3, [r7, #4]
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000bcc 	.word	0x20000bcc

08003350 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335a:	4b4f      	ldr	r3, [pc, #316]	; (8003498 <xTaskIncrementTick+0x148>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f040 808f 	bne.w	8003482 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003364:	4b4d      	ldr	r3, [pc, #308]	; (800349c <xTaskIncrementTick+0x14c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3301      	adds	r3, #1
 800336a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800336c:	4a4b      	ldr	r2, [pc, #300]	; (800349c <xTaskIncrementTick+0x14c>)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d120      	bne.n	80033ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003378:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <xTaskIncrementTick+0x150>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <xTaskIncrementTick+0x48>
	__asm volatile
 8003382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003386:	f383 8811 	msr	BASEPRI, r3
 800338a:	f3bf 8f6f 	isb	sy
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	603b      	str	r3, [r7, #0]
}
 8003394:	bf00      	nop
 8003396:	e7fe      	b.n	8003396 <xTaskIncrementTick+0x46>
 8003398:	4b41      	ldr	r3, [pc, #260]	; (80034a0 <xTaskIncrementTick+0x150>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	60fb      	str	r3, [r7, #12]
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <xTaskIncrementTick+0x154>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <xTaskIncrementTick+0x150>)
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	4a3f      	ldr	r2, [pc, #252]	; (80034a4 <xTaskIncrementTick+0x154>)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b3e      	ldr	r3, [pc, #248]	; (80034a8 <xTaskIncrementTick+0x158>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a3d      	ldr	r2, [pc, #244]	; (80034a8 <xTaskIncrementTick+0x158>)
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	f000 fad1 	bl	800395c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <xTaskIncrementTick+0x15c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d349      	bcc.n	8003458 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <xTaskIncrementTick+0x150>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ce:	4b37      	ldr	r3, [pc, #220]	; (80034ac <xTaskIncrementTick+0x15c>)
 80033d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033d4:	601a      	str	r2, [r3, #0]
					break;
 80033d6:	e03f      	b.n	8003458 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d8:	4b31      	ldr	r3, [pc, #196]	; (80034a0 <xTaskIncrementTick+0x150>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d203      	bcs.n	80033f8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033f0:	4a2e      	ldr	r2, [pc, #184]	; (80034ac <xTaskIncrementTick+0x15c>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033f6:	e02f      	b.n	8003458 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe ff99 	bl	8002334 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d004      	beq.n	8003414 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	3318      	adds	r3, #24
 800340e:	4618      	mov	r0, r3
 8003410:	f7fe ff90 	bl	8002334 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003418:	4b25      	ldr	r3, [pc, #148]	; (80034b0 <xTaskIncrementTick+0x160>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	429a      	cmp	r2, r3
 800341e:	d903      	bls.n	8003428 <xTaskIncrementTick+0xd8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003424:	4a22      	ldr	r2, [pc, #136]	; (80034b0 <xTaskIncrementTick+0x160>)
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <xTaskIncrementTick+0x164>)
 8003436:	441a      	add	r2, r3
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f7fe ff1b 	bl	800227a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <xTaskIncrementTick+0x168>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	429a      	cmp	r2, r3
 8003450:	d3b8      	bcc.n	80033c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003452:	2301      	movs	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003456:	e7b5      	b.n	80033c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003458:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <xTaskIncrementTick+0x168>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800345e:	4915      	ldr	r1, [pc, #84]	; (80034b4 <xTaskIncrementTick+0x164>)
 8003460:	4613      	mov	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d901      	bls.n	8003474 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003470:	2301      	movs	r3, #1
 8003472:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <xTaskIncrementTick+0x16c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800347c:	2301      	movs	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	e004      	b.n	800348c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <xTaskIncrementTick+0x170>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	4a0d      	ldr	r2, [pc, #52]	; (80034c0 <xTaskIncrementTick+0x170>)
 800348a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800348c:	697b      	ldr	r3, [r7, #20]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3718      	adds	r7, #24
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000bf0 	.word	0x20000bf0
 800349c:	20000bcc 	.word	0x20000bcc
 80034a0:	20000b80 	.word	0x20000b80
 80034a4:	20000b84 	.word	0x20000b84
 80034a8:	20000be0 	.word	0x20000be0
 80034ac:	20000be8 	.word	0x20000be8
 80034b0:	20000bd0 	.word	0x20000bd0
 80034b4:	200006f8 	.word	0x200006f8
 80034b8:	200006f4 	.word	0x200006f4
 80034bc:	20000bdc 	.word	0x20000bdc
 80034c0:	20000bd8 	.word	0x20000bd8

080034c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034ca:	4b28      	ldr	r3, [pc, #160]	; (800356c <vTaskSwitchContext+0xa8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034d2:	4b27      	ldr	r3, [pc, #156]	; (8003570 <vTaskSwitchContext+0xac>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034d8:	e041      	b.n	800355e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80034da:	4b25      	ldr	r3, [pc, #148]	; (8003570 <vTaskSwitchContext+0xac>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <vTaskSwitchContext+0xb0>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e010      	b.n	800350a <vTaskSwitchContext+0x46>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <vTaskSwitchContext+0x40>
	__asm volatile
 80034ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f2:	f383 8811 	msr	BASEPRI, r3
 80034f6:	f3bf 8f6f 	isb	sy
 80034fa:	f3bf 8f4f 	dsb	sy
 80034fe:	607b      	str	r3, [r7, #4]
}
 8003500:	bf00      	nop
 8003502:	e7fe      	b.n	8003502 <vTaskSwitchContext+0x3e>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3b01      	subs	r3, #1
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	491b      	ldr	r1, [pc, #108]	; (8003578 <vTaskSwitchContext+0xb4>)
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0e4      	beq.n	80034e8 <vTaskSwitchContext+0x24>
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <vTaskSwitchContext+0xb4>)
 800352a:	4413      	add	r3, r2
 800352c:	60bb      	str	r3, [r7, #8]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3308      	adds	r3, #8
 8003540:	429a      	cmp	r2, r3
 8003542:	d104      	bne.n	800354e <vTaskSwitchContext+0x8a>
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	605a      	str	r2, [r3, #4]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a09      	ldr	r2, [pc, #36]	; (800357c <vTaskSwitchContext+0xb8>)
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	4a06      	ldr	r2, [pc, #24]	; (8003574 <vTaskSwitchContext+0xb0>)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6013      	str	r3, [r2, #0]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000bf0 	.word	0x20000bf0
 8003570:	20000bdc 	.word	0x20000bdc
 8003574:	20000bd0 	.word	0x20000bd0
 8003578:	200006f8 	.word	0x200006f8
 800357c:	200006f4 	.word	0x200006f4

08003580 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10a      	bne.n	80035a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003594:	f383 8811 	msr	BASEPRI, r3
 8003598:	f3bf 8f6f 	isb	sy
 800359c:	f3bf 8f4f 	dsb	sy
 80035a0:	60fb      	str	r3, [r7, #12]
}
 80035a2:	bf00      	nop
 80035a4:	e7fe      	b.n	80035a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035a6:	4b07      	ldr	r3, [pc, #28]	; (80035c4 <vTaskPlaceOnEventList+0x44>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	3318      	adds	r3, #24
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f7fe fe87 	bl	80022c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035b4:	2101      	movs	r1, #1
 80035b6:	6838      	ldr	r0, [r7, #0]
 80035b8:	f000 fa7c 	bl	8003ab4 <prvAddCurrentTaskToDelayedList>
}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	200006f4 	.word	0x200006f4

080035c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10a      	bne.n	80035f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	617b      	str	r3, [r7, #20]
}
 80035ec:	bf00      	nop
 80035ee:	e7fe      	b.n	80035ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <vTaskPlaceOnEventListRestricted+0x54>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3318      	adds	r3, #24
 80035f6:	4619      	mov	r1, r3
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7fe fe3e 	bl	800227a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d002      	beq.n	800360a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003608:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	68b8      	ldr	r0, [r7, #8]
 800360e:	f000 fa51 	bl	8003ab4 <prvAddCurrentTaskToDelayedList>
	}
 8003612:	bf00      	nop
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200006f4 	.word	0x200006f4

08003620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60fb      	str	r3, [r7, #12]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	3318      	adds	r3, #24
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fe6f 	bl	8002334 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <xTaskRemoveFromEventList+0xb0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d11d      	bne.n	800369a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3304      	adds	r3, #4
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe fe66 	bl	8002334 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366c:	4b19      	ldr	r3, [pc, #100]	; (80036d4 <xTaskRemoveFromEventList+0xb4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d903      	bls.n	800367c <xTaskRemoveFromEventList+0x5c>
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4a16      	ldr	r2, [pc, #88]	; (80036d4 <xTaskRemoveFromEventList+0xb4>)
 800367a:	6013      	str	r3, [r2, #0]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	4613      	mov	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4a13      	ldr	r2, [pc, #76]	; (80036d8 <xTaskRemoveFromEventList+0xb8>)
 800368a:	441a      	add	r2, r3
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f7fe fdf1 	bl	800227a <vListInsertEnd>
 8003698:	e005      	b.n	80036a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3318      	adds	r3, #24
 800369e:	4619      	mov	r1, r3
 80036a0:	480e      	ldr	r0, [pc, #56]	; (80036dc <xTaskRemoveFromEventList+0xbc>)
 80036a2:	f7fe fdea 	bl	800227a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036aa:	4b0d      	ldr	r3, [pc, #52]	; (80036e0 <xTaskRemoveFromEventList+0xc0>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d905      	bls.n	80036c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036b8:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <xTaskRemoveFromEventList+0xc4>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e001      	b.n	80036c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036c4:	697b      	ldr	r3, [r7, #20]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3718      	adds	r7, #24
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000bf0 	.word	0x20000bf0
 80036d4:	20000bd0 	.word	0x20000bd0
 80036d8:	200006f8 	.word	0x200006f8
 80036dc:	20000b88 	.word	0x20000b88
 80036e0:	200006f4 	.word	0x200006f4
 80036e4:	20000bdc 	.word	0x20000bdc

080036e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036f0:	4b06      	ldr	r3, [pc, #24]	; (800370c <vTaskInternalSetTimeOutState+0x24>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <vTaskInternalSetTimeOutState+0x28>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	20000be0 	.word	0x20000be0
 8003710:	20000bcc 	.word	0x20000bcc

08003714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10a      	bne.n	800373a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	613b      	str	r3, [r7, #16]
}
 8003736:	bf00      	nop
 8003738:	e7fe      	b.n	8003738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	60fb      	str	r3, [r7, #12]
}
 8003752:	bf00      	nop
 8003754:	e7fe      	b.n	8003754 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003756:	f000 fe7d 	bl	8004454 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800375a:	4b1d      	ldr	r3, [pc, #116]	; (80037d0 <xTaskCheckForTimeOut+0xbc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003772:	d102      	bne.n	800377a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003774:	2300      	movs	r3, #0
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	e023      	b.n	80037c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <xTaskCheckForTimeOut+0xc0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d007      	beq.n	8003796 <xTaskCheckForTimeOut+0x82>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	429a      	cmp	r2, r3
 800378e:	d302      	bcc.n	8003796 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	e015      	b.n	80037c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	429a      	cmp	r2, r3
 800379e:	d20b      	bcs.n	80037b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	1ad2      	subs	r2, r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff ff9b 	bl	80036e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	e004      	b.n	80037c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2200      	movs	r2, #0
 80037bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037be:	2301      	movs	r3, #1
 80037c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037c2:	f000 fe77 	bl	80044b4 <vPortExitCritical>

	return xReturn;
 80037c6:	69fb      	ldr	r3, [r7, #28]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3720      	adds	r7, #32
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000bcc 	.word	0x20000bcc
 80037d4:	20000be0 	.word	0x20000be0

080037d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <vTaskMissedYield+0x14>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
}
 80037e2:	bf00      	nop
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	20000bdc 	.word	0x20000bdc

080037f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037f8:	f000 f852 	bl	80038a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <prvIdleTask+0x28>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d9f9      	bls.n	80037f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003804:	4b05      	ldr	r3, [pc, #20]	; (800381c <prvIdleTask+0x2c>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003814:	e7f0      	b.n	80037f8 <prvIdleTask+0x8>
 8003816:	bf00      	nop
 8003818:	200006f8 	.word	0x200006f8
 800381c:	e000ed04 	.word	0xe000ed04

08003820 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003826:	2300      	movs	r3, #0
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	e00c      	b.n	8003846 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4a12      	ldr	r2, [pc, #72]	; (8003880 <prvInitialiseTaskLists+0x60>)
 8003838:	4413      	add	r3, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fcf0 	bl	8002220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3301      	adds	r3, #1
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2b37      	cmp	r3, #55	; 0x37
 800384a:	d9ef      	bls.n	800382c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800384c:	480d      	ldr	r0, [pc, #52]	; (8003884 <prvInitialiseTaskLists+0x64>)
 800384e:	f7fe fce7 	bl	8002220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003852:	480d      	ldr	r0, [pc, #52]	; (8003888 <prvInitialiseTaskLists+0x68>)
 8003854:	f7fe fce4 	bl	8002220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003858:	480c      	ldr	r0, [pc, #48]	; (800388c <prvInitialiseTaskLists+0x6c>)
 800385a:	f7fe fce1 	bl	8002220 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800385e:	480c      	ldr	r0, [pc, #48]	; (8003890 <prvInitialiseTaskLists+0x70>)
 8003860:	f7fe fcde 	bl	8002220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003864:	480b      	ldr	r0, [pc, #44]	; (8003894 <prvInitialiseTaskLists+0x74>)
 8003866:	f7fe fcdb 	bl	8002220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800386a:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <prvInitialiseTaskLists+0x78>)
 800386c:	4a05      	ldr	r2, [pc, #20]	; (8003884 <prvInitialiseTaskLists+0x64>)
 800386e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003870:	4b0a      	ldr	r3, [pc, #40]	; (800389c <prvInitialiseTaskLists+0x7c>)
 8003872:	4a05      	ldr	r2, [pc, #20]	; (8003888 <prvInitialiseTaskLists+0x68>)
 8003874:	601a      	str	r2, [r3, #0]
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	200006f8 	.word	0x200006f8
 8003884:	20000b58 	.word	0x20000b58
 8003888:	20000b6c 	.word	0x20000b6c
 800388c:	20000b88 	.word	0x20000b88
 8003890:	20000b9c 	.word	0x20000b9c
 8003894:	20000bb4 	.word	0x20000bb4
 8003898:	20000b80 	.word	0x20000b80
 800389c:	20000b84 	.word	0x20000b84

080038a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038a6:	e019      	b.n	80038dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038a8:	f000 fdd4 	bl	8004454 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ac:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <prvCheckTasksWaitingTermination+0x50>)
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3304      	adds	r3, #4
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7fe fd3b 	bl	8002334 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <prvCheckTasksWaitingTermination+0x54>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	4a0b      	ldr	r2, [pc, #44]	; (80038f4 <prvCheckTasksWaitingTermination+0x54>)
 80038c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <prvCheckTasksWaitingTermination+0x58>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	4a0a      	ldr	r2, [pc, #40]	; (80038f8 <prvCheckTasksWaitingTermination+0x58>)
 80038d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038d2:	f000 fdef 	bl	80044b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f810 	bl	80038fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038dc:	4b06      	ldr	r3, [pc, #24]	; (80038f8 <prvCheckTasksWaitingTermination+0x58>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e1      	bne.n	80038a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000b9c 	.word	0x20000b9c
 80038f4:	20000bc8 	.word	0x20000bc8
 80038f8:	20000bb0 	.word	0x20000bb0

080038fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800390a:	2b00      	cmp	r3, #0
 800390c:	d108      	bne.n	8003920 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	4618      	mov	r0, r3
 8003914:	f000 ff8c 	bl	8004830 <vPortFree>
				vPortFree( pxTCB );
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 ff89 	bl	8004830 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800391e:	e018      	b.n	8003952 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003926:	2b01      	cmp	r3, #1
 8003928:	d103      	bne.n	8003932 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 ff80 	bl	8004830 <vPortFree>
	}
 8003930:	e00f      	b.n	8003952 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003938:	2b02      	cmp	r3, #2
 800393a:	d00a      	beq.n	8003952 <prvDeleteTCB+0x56>
	__asm volatile
 800393c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003940:	f383 8811 	msr	BASEPRI, r3
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	60fb      	str	r3, [r7, #12]
}
 800394e:	bf00      	nop
 8003950:	e7fe      	b.n	8003950 <prvDeleteTCB+0x54>
	}
 8003952:	bf00      	nop
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <prvResetNextTaskUnblockTime+0x38>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d104      	bne.n	8003976 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800396c:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <prvResetNextTaskUnblockTime+0x3c>)
 800396e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003972:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003974:	e008      	b.n	8003988 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003976:	4b07      	ldr	r3, [pc, #28]	; (8003994 <prvResetNextTaskUnblockTime+0x38>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <prvResetNextTaskUnblockTime+0x3c>)
 8003986:	6013      	str	r3, [r2, #0]
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	20000b80 	.word	0x20000b80
 8003998:	20000be8 	.word	0x20000be8

0800399c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <xTaskGetSchedulerState+0x34>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039aa:	2301      	movs	r3, #1
 80039ac:	607b      	str	r3, [r7, #4]
 80039ae:	e008      	b.n	80039c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b0:	4b08      	ldr	r3, [pc, #32]	; (80039d4 <xTaskGetSchedulerState+0x38>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d102      	bne.n	80039be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039b8:	2302      	movs	r3, #2
 80039ba:	607b      	str	r3, [r7, #4]
 80039bc:	e001      	b.n	80039c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039be:	2300      	movs	r3, #0
 80039c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039c2:	687b      	ldr	r3, [r7, #4]
	}
 80039c4:	4618      	mov	r0, r3
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	20000bd4 	.word	0x20000bd4
 80039d4:	20000bf0 	.word	0x20000bf0

080039d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d056      	beq.n	8003a9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039ee:	4b2e      	ldr	r3, [pc, #184]	; (8003aa8 <xTaskPriorityDisinherit+0xd0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d00a      	beq.n	8003a0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60fb      	str	r3, [r7, #12]
}
 8003a0a:	bf00      	nop
 8003a0c:	e7fe      	b.n	8003a0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10a      	bne.n	8003a2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1a:	f383 8811 	msr	BASEPRI, r3
 8003a1e:	f3bf 8f6f 	isb	sy
 8003a22:	f3bf 8f4f 	dsb	sy
 8003a26:	60bb      	str	r3, [r7, #8]
}
 8003a28:	bf00      	nop
 8003a2a:	e7fe      	b.n	8003a2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a30:	1e5a      	subs	r2, r3, #1
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d02c      	beq.n	8003a9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d128      	bne.n	8003a9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7fe fc70 	bl	8002334 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <xTaskPriorityDisinherit+0xd4>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d903      	bls.n	8003a7c <xTaskPriorityDisinherit+0xa4>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <xTaskPriorityDisinherit+0xd4>)
 8003a7a:	6013      	str	r3, [r2, #0]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a80:	4613      	mov	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <xTaskPriorityDisinherit+0xd8>)
 8003a8a:	441a      	add	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4619      	mov	r1, r3
 8003a92:	4610      	mov	r0, r2
 8003a94:	f7fe fbf1 	bl	800227a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003a9c:	697b      	ldr	r3, [r7, #20]
	}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200006f4 	.word	0x200006f4
 8003aac:	20000bd0 	.word	0x20000bd0
 8003ab0:	200006f8 	.word	0x200006f8

08003ab4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003abe:	4b21      	ldr	r3, [pc, #132]	; (8003b44 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ac4:	4b20      	ldr	r3, [pc, #128]	; (8003b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3304      	adds	r3, #4
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe fc32 	bl	8002334 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ad6:	d10a      	bne.n	8003aee <prvAddCurrentTaskToDelayedList+0x3a>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ade:	4b1a      	ldr	r3, [pc, #104]	; (8003b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4819      	ldr	r0, [pc, #100]	; (8003b4c <prvAddCurrentTaskToDelayedList+0x98>)
 8003ae8:	f7fe fbc7 	bl	800227a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003aec:	e026      	b.n	8003b3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003af6:	4b14      	ldr	r3, [pc, #80]	; (8003b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d209      	bcs.n	8003b1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	4619      	mov	r1, r3
 8003b12:	4610      	mov	r0, r2
 8003b14:	f7fe fbd5 	bl	80022c2 <vListInsert>
}
 8003b18:	e010      	b.n	8003b3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b1a:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <prvAddCurrentTaskToDelayedList+0x94>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe fbcb 	bl	80022c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d202      	bcs.n	8003b3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b36:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	6013      	str	r3, [r2, #0]
}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000bcc 	.word	0x20000bcc
 8003b48:	200006f4 	.word	0x200006f4
 8003b4c:	20000bb4 	.word	0x20000bb4
 8003b50:	20000b84 	.word	0x20000b84
 8003b54:	20000b80 	.word	0x20000b80
 8003b58:	20000be8 	.word	0x20000be8

08003b5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08a      	sub	sp, #40	; 0x28
 8003b60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b66:	f000 fb07 	bl	8004178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b6a:	4b1c      	ldr	r3, [pc, #112]	; (8003bdc <xTimerCreateTimerTask+0x80>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d021      	beq.n	8003bb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b7a:	1d3a      	adds	r2, r7, #4
 8003b7c:	f107 0108 	add.w	r1, r7, #8
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fe fb31 	bl	80021ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	9202      	str	r2, [sp, #8]
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	2302      	movs	r3, #2
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	460a      	mov	r2, r1
 8003b9c:	4910      	ldr	r1, [pc, #64]	; (8003be0 <xTimerCreateTimerTask+0x84>)
 8003b9e:	4811      	ldr	r0, [pc, #68]	; (8003be4 <xTimerCreateTimerTask+0x88>)
 8003ba0:	f7ff f8de 	bl	8002d60 <xTaskCreateStatic>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <xTimerCreateTimerTask+0x8c>)
 8003ba8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003baa:	4b0f      	ldr	r3, [pc, #60]	; (8003be8 <xTimerCreateTimerTask+0x8c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10a      	bne.n	8003bd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	613b      	str	r3, [r7, #16]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003bd2:	697b      	ldr	r3, [r7, #20]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	20000c24 	.word	0x20000c24
 8003be0:	08004b0c 	.word	0x08004b0c
 8003be4:	08003d21 	.word	0x08003d21
 8003be8:	20000c28 	.word	0x20000c28

08003bec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	; 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	60f8      	str	r0, [r7, #12]
 8003bf4:	60b9      	str	r1, [r7, #8]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	623b      	str	r3, [r7, #32]
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d02a      	beq.n	8003c78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b05      	cmp	r3, #5
 8003c32:	dc18      	bgt.n	8003c66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c34:	f7ff feb2 	bl	800399c <xTaskGetSchedulerState>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d109      	bne.n	8003c52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c3e:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c40:	6818      	ldr	r0, [r3, #0]
 8003c42:	f107 0110 	add.w	r1, r7, #16
 8003c46:	2300      	movs	r3, #0
 8003c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4a:	f7fe fca1 	bl	8002590 <xQueueGenericSend>
 8003c4e:	6278      	str	r0, [r7, #36]	; 0x24
 8003c50:	e012      	b.n	8003c78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c52:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c54:	6818      	ldr	r0, [r3, #0]
 8003c56:	f107 0110 	add.w	r1, r7, #16
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f7fe fc97 	bl	8002590 <xQueueGenericSend>
 8003c62:	6278      	str	r0, [r7, #36]	; 0x24
 8003c64:	e008      	b.n	8003c78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <xTimerGenericCommand+0x98>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	f107 0110 	add.w	r1, r7, #16
 8003c6e:	2300      	movs	r3, #0
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	f7fe fd8b 	bl	800278c <xQueueGenericSendFromISR>
 8003c76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3728      	adds	r7, #40	; 0x28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000c24 	.word	0x20000c24

08003c88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c92:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <prvProcessExpiredTimer+0x94>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fe fb47 	bl	8002334 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d022      	beq.n	8003cfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	18d1      	adds	r1, r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f000 f8d1 	bl	8003e68 <prvInsertTimerInActiveList>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01f      	beq.n	8003d0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ccc:	2300      	movs	r3, #0
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	6978      	ldr	r0, [r7, #20]
 8003cd8:	f7ff ff88 	bl	8003bec <xTimerGenericCommand>
 8003cdc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d113      	bne.n	8003d0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	6978      	ldr	r0, [r7, #20]
 8003d12:	4798      	blx	r3
}
 8003d14:	bf00      	nop
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	20000c1c 	.word	0x20000c1c

08003d20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d28:	f107 0308 	add.w	r3, r7, #8
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 f857 	bl	8003de0 <prvGetNextExpireTime>
 8003d32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4619      	mov	r1, r3
 8003d38:	68f8      	ldr	r0, [r7, #12]
 8003d3a:	f000 f803 	bl	8003d44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d3e:	f000 f8d5 	bl	8003eec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d42:	e7f1      	b.n	8003d28 <prvTimerTask+0x8>

08003d44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d4e:	f7ff fa43 	bl	80031d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d52:	f107 0308 	add.w	r3, r7, #8
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f866 	bl	8003e28 <prvSampleTimeNow>
 8003d5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d130      	bne.n	8003dc6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10a      	bne.n	8003d80 <prvProcessTimerOrBlockTask+0x3c>
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d806      	bhi.n	8003d80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d72:	f7ff fa3f 	bl	80031f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff85 	bl	8003c88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d7e:	e024      	b.n	8003dca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d86:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <prvProcessTimerOrBlockTask+0x90>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <prvProcessTimerOrBlockTask+0x50>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <prvProcessTimerOrBlockTask+0x52>
 8003d94:	2300      	movs	r3, #0
 8003d96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <prvProcessTimerOrBlockTask+0x94>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	4619      	mov	r1, r3
 8003da6:	f7fe ffa7 	bl	8002cf8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003daa:	f7ff fa23 	bl	80031f4 <xTaskResumeAll>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003db4:	4b09      	ldr	r3, [pc, #36]	; (8003ddc <prvProcessTimerOrBlockTask+0x98>)
 8003db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	f3bf 8f6f 	isb	sy
}
 8003dc4:	e001      	b.n	8003dca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003dc6:	f7ff fa15 	bl	80031f4 <xTaskResumeAll>
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000c20 	.word	0x20000c20
 8003dd8:	20000c24 	.word	0x20000c24
 8003ddc:	e000ed04 	.word	0xe000ed04

08003de0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003de8:	4b0e      	ldr	r3, [pc, #56]	; (8003e24 <prvGetNextExpireTime+0x44>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <prvGetNextExpireTime+0x16>
 8003df2:	2201      	movs	r2, #1
 8003df4:	e000      	b.n	8003df8 <prvGetNextExpireTime+0x18>
 8003df6:	2200      	movs	r2, #0
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d105      	bne.n	8003e10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <prvGetNextExpireTime+0x44>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e001      	b.n	8003e14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e14:	68fb      	ldr	r3, [r7, #12]
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000c1c 	.word	0x20000c1c

08003e28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e30:	f7ff fa7e 	bl	8003330 <xTaskGetTickCount>
 8003e34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <prvSampleTimeNow+0x3c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d205      	bcs.n	8003e4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e40:	f000 f936 	bl	80040b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	e002      	b.n	8003e52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e52:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <prvSampleTimeNow+0x3c>)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000c2c 	.word	0x20000c2c

08003e68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d812      	bhi.n	8003eb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	1ad2      	subs	r2, r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	617b      	str	r3, [r7, #20]
 8003ea0:	e01b      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ea2:	4b10      	ldr	r3, [pc, #64]	; (8003ee4 <prvInsertTimerInActiveList+0x7c>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe fa08 	bl	80022c2 <vListInsert>
 8003eb2:	e012      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d206      	bcs.n	8003eca <prvInsertTimerInActiveList+0x62>
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e007      	b.n	8003eda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eca:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <prvInsertTimerInActiveList+0x80>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7fe f9f4 	bl	80022c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003eda:	697b      	ldr	r3, [r7, #20]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000c20 	.word	0x20000c20
 8003ee8:	20000c1c 	.word	0x20000c1c

08003eec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08e      	sub	sp, #56	; 0x38
 8003ef0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ef2:	e0ca      	b.n	800408a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da18      	bge.n	8003f2c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003efa:	1d3b      	adds	r3, r7, #4
 8003efc:	3304      	adds	r3, #4
 8003efe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	61fb      	str	r3, [r7, #28]
}
 8003f18:	bf00      	nop
 8003f1a:	e7fe      	b.n	8003f1a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f22:	6850      	ldr	r0, [r2, #4]
 8003f24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f26:	6892      	ldr	r2, [r2, #8]
 8003f28:	4611      	mov	r1, r2
 8003f2a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f2c0 80aa 	blt.w	8004088 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	3304      	adds	r3, #4
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe f9f5 	bl	8002334 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f4a:	463b      	mov	r3, r7
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff6b 	bl	8003e28 <prvSampleTimeNow>
 8003f52:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b09      	cmp	r3, #9
 8003f58:	f200 8097 	bhi.w	800408a <prvProcessReceivedCommands+0x19e>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <prvProcessReceivedCommands+0x78>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003f8d 	.word	0x08003f8d
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f8d 	.word	0x08003f8d
 8003f70:	08004001 	.word	0x08004001
 8003f74:	08004015 	.word	0x08004015
 8003f78:	0800405f 	.word	0x0800405f
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003f8d 	.word	0x08003f8d
 8003f84:	08004001 	.word	0x08004001
 8003f88:	08004015 	.word	0x08004015
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	b2da      	uxtb	r2, r3
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	18d1      	adds	r1, r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003faa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fac:	f7ff ff5c 	bl	8003e68 <prvInsertTimerInActiveList>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d069      	beq.n	800408a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fbc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d05e      	beq.n	800408a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	441a      	add	r2, r3
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fde:	f7ff fe05 	bl	8003bec <xTimerGenericCommand>
 8003fe2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d14f      	bne.n	800408a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fee:	f383 8811 	msr	BASEPRI, r3
 8003ff2:	f3bf 8f6f 	isb	sy
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	61bb      	str	r3, [r7, #24]
}
 8003ffc:	bf00      	nop
 8003ffe:	e7fe      	b.n	8003ffe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004012:	e03a      	b.n	800408a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	b2da      	uxtb	r2, r3
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	617b      	str	r3, [r7, #20]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800404a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404c:	699a      	ldr	r2, [r3, #24]
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	18d1      	adds	r1, r2, r3
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004058:	f7ff ff06 	bl	8003e68 <prvInsertTimerInActiveList>
					break;
 800405c:	e015      	b.n	800408a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d103      	bne.n	8004074 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800406c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800406e:	f000 fbdf 	bl	8004830 <vPortFree>
 8004072:	e00a      	b.n	800408a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407a:	f023 0301 	bic.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004086:	e000      	b.n	800408a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <prvProcessReceivedCommands+0x1c0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	1d39      	adds	r1, r7, #4
 8004090:	2200      	movs	r2, #0
 8004092:	4618      	mov	r0, r3
 8004094:	f7fe fc16 	bl	80028c4 <xQueueReceive>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	f47f af2a 	bne.w	8003ef4 <prvProcessReceivedCommands+0x8>
	}
}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3730      	adds	r7, #48	; 0x30
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	20000c24 	.word	0x20000c24

080040b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040b6:	e048      	b.n	800414a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b8:	4b2d      	ldr	r3, [pc, #180]	; (8004170 <prvSwitchTimerLists+0xc0>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c2:	4b2b      	ldr	r3, [pc, #172]	; (8004170 <prvSwitchTimerLists+0xc0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3304      	adds	r3, #4
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe f92f 	bl	8002334 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a1b      	ldr	r3, [r3, #32]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d02e      	beq.n	800414a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	699b      	ldr	r3, [r3, #24]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4413      	add	r3, r2
 80040f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80040f6:	68ba      	ldr	r2, [r7, #8]
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d90e      	bls.n	800411c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800410a:	4b19      	ldr	r3, [pc, #100]	; (8004170 <prvSwitchTimerLists+0xc0>)
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	3304      	adds	r3, #4
 8004112:	4619      	mov	r1, r3
 8004114:	4610      	mov	r0, r2
 8004116:	f7fe f8d4 	bl	80022c2 <vListInsert>
 800411a:	e016      	b.n	800414a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800411c:	2300      	movs	r3, #0
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2300      	movs	r3, #0
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	2100      	movs	r1, #0
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f7ff fd60 	bl	8003bec <xTimerGenericCommand>
 800412c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004138:	f383 8811 	msr	BASEPRI, r3
 800413c:	f3bf 8f6f 	isb	sy
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	603b      	str	r3, [r7, #0]
}
 8004146:	bf00      	nop
 8004148:	e7fe      	b.n	8004148 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <prvSwitchTimerLists+0xc0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1b1      	bne.n	80040b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <prvSwitchTimerLists+0xc0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <prvSwitchTimerLists+0xc4>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <prvSwitchTimerLists+0xc0>)
 8004160:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004162:	4a04      	ldr	r2, [pc, #16]	; (8004174 <prvSwitchTimerLists+0xc4>)
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000c1c 	.word	0x20000c1c
 8004174:	20000c20 	.word	0x20000c20

08004178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800417e:	f000 f969 	bl	8004454 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004182:	4b15      	ldr	r3, [pc, #84]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d120      	bne.n	80041cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800418a:	4814      	ldr	r0, [pc, #80]	; (80041dc <prvCheckForValidListAndQueue+0x64>)
 800418c:	f7fe f848 	bl	8002220 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004190:	4813      	ldr	r0, [pc, #76]	; (80041e0 <prvCheckForValidListAndQueue+0x68>)
 8004192:	f7fe f845 	bl	8002220 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004196:	4b13      	ldr	r3, [pc, #76]	; (80041e4 <prvCheckForValidListAndQueue+0x6c>)
 8004198:	4a10      	ldr	r2, [pc, #64]	; (80041dc <prvCheckForValidListAndQueue+0x64>)
 800419a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <prvCheckForValidListAndQueue+0x70>)
 800419e:	4a10      	ldr	r2, [pc, #64]	; (80041e0 <prvCheckForValidListAndQueue+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	4b11      	ldr	r3, [pc, #68]	; (80041ec <prvCheckForValidListAndQueue+0x74>)
 80041a8:	4a11      	ldr	r2, [pc, #68]	; (80041f0 <prvCheckForValidListAndQueue+0x78>)
 80041aa:	2110      	movs	r1, #16
 80041ac:	200a      	movs	r0, #10
 80041ae:	f7fe f953 	bl	8002458 <xQueueGenericCreateStatic>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 80041b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041b8:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041c0:	4b05      	ldr	r3, [pc, #20]	; (80041d8 <prvCheckForValidListAndQueue+0x60>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	490b      	ldr	r1, [pc, #44]	; (80041f4 <prvCheckForValidListAndQueue+0x7c>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fd6c 	bl	8002ca4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041cc:	f000 f972 	bl	80044b4 <vPortExitCritical>
}
 80041d0:	bf00      	nop
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000c24 	.word	0x20000c24
 80041dc:	20000bf4 	.word	0x20000bf4
 80041e0:	20000c08 	.word	0x20000c08
 80041e4:	20000c1c 	.word	0x20000c1c
 80041e8:	20000c20 	.word	0x20000c20
 80041ec:	20000cd0 	.word	0x20000cd0
 80041f0:	20000c30 	.word	0x20000c30
 80041f4:	08004b14 	.word	0x08004b14

080041f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3b04      	subs	r3, #4
 8004208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	3b04      	subs	r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3b04      	subs	r3, #4
 8004226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004228:	4a0c      	ldr	r2, [pc, #48]	; (800425c <pxPortInitialiseStack+0x64>)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	3b14      	subs	r3, #20
 8004232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3b04      	subs	r3, #4
 800423e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f06f 0202 	mvn.w	r2, #2
 8004246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b20      	subs	r3, #32
 800424c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800424e:	68fb      	ldr	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	08004261 	.word	0x08004261

08004260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800426a:	4b12      	ldr	r3, [pc, #72]	; (80042b4 <prvTaskExitError+0x54>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004272:	d00a      	beq.n	800428a <prvTaskExitError+0x2a>
	__asm volatile
 8004274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	60fb      	str	r3, [r7, #12]
}
 8004286:	bf00      	nop
 8004288:	e7fe      	b.n	8004288 <prvTaskExitError+0x28>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	60bb      	str	r3, [r7, #8]
}
 800429c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800429e:	bf00      	nop
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0fc      	beq.n	80042a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	3714      	adds	r7, #20
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	2000000c 	.word	0x2000000c
	...

080042c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042c0:	4b07      	ldr	r3, [pc, #28]	; (80042e0 <pxCurrentTCBConst2>)
 80042c2:	6819      	ldr	r1, [r3, #0]
 80042c4:	6808      	ldr	r0, [r1, #0]
 80042c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ca:	f380 8809 	msr	PSP, r0
 80042ce:	f3bf 8f6f 	isb	sy
 80042d2:	f04f 0000 	mov.w	r0, #0
 80042d6:	f380 8811 	msr	BASEPRI, r0
 80042da:	4770      	bx	lr
 80042dc:	f3af 8000 	nop.w

080042e0 <pxCurrentTCBConst2>:
 80042e0:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80042e4:	bf00      	nop
 80042e6:	bf00      	nop

080042e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80042e8:	4808      	ldr	r0, [pc, #32]	; (800430c <prvPortStartFirstTask+0x24>)
 80042ea:	6800      	ldr	r0, [r0, #0]
 80042ec:	6800      	ldr	r0, [r0, #0]
 80042ee:	f380 8808 	msr	MSP, r0
 80042f2:	f04f 0000 	mov.w	r0, #0
 80042f6:	f380 8814 	msr	CONTROL, r0
 80042fa:	b662      	cpsie	i
 80042fc:	b661      	cpsie	f
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	df00      	svc	0
 8004308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800430a:	bf00      	nop
 800430c:	e000ed08 	.word	0xe000ed08

08004310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004316:	4b46      	ldr	r3, [pc, #280]	; (8004430 <xPortStartScheduler+0x120>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a46      	ldr	r2, [pc, #280]	; (8004434 <xPortStartScheduler+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d10a      	bne.n	8004336 <xPortStartScheduler+0x26>
	__asm volatile
 8004320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004324:	f383 8811 	msr	BASEPRI, r3
 8004328:	f3bf 8f6f 	isb	sy
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	613b      	str	r3, [r7, #16]
}
 8004332:	bf00      	nop
 8004334:	e7fe      	b.n	8004334 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004336:	4b3e      	ldr	r3, [pc, #248]	; (8004430 <xPortStartScheduler+0x120>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <xPortStartScheduler+0x128>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10a      	bne.n	8004356 <xPortStartScheduler+0x46>
	__asm volatile
 8004340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004344:	f383 8811 	msr	BASEPRI, r3
 8004348:	f3bf 8f6f 	isb	sy
 800434c:	f3bf 8f4f 	dsb	sy
 8004350:	60fb      	str	r3, [r7, #12]
}
 8004352:	bf00      	nop
 8004354:	e7fe      	b.n	8004354 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004356:	4b39      	ldr	r3, [pc, #228]	; (800443c <xPortStartScheduler+0x12c>)
 8004358:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	22ff      	movs	r2, #255	; 0xff
 8004366:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004378:	b2da      	uxtb	r2, r3
 800437a:	4b31      	ldr	r3, [pc, #196]	; (8004440 <xPortStartScheduler+0x130>)
 800437c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800437e:	4b31      	ldr	r3, [pc, #196]	; (8004444 <xPortStartScheduler+0x134>)
 8004380:	2207      	movs	r2, #7
 8004382:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004384:	e009      	b.n	800439a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004386:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <xPortStartScheduler+0x134>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3b01      	subs	r3, #1
 800438c:	4a2d      	ldr	r2, [pc, #180]	; (8004444 <xPortStartScheduler+0x134>)
 800438e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004390:	78fb      	ldrb	r3, [r7, #3]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	005b      	lsls	r3, r3, #1
 8004396:	b2db      	uxtb	r3, r3
 8004398:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a2:	2b80      	cmp	r3, #128	; 0x80
 80043a4:	d0ef      	beq.n	8004386 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043a6:	4b27      	ldr	r3, [pc, #156]	; (8004444 <xPortStartScheduler+0x134>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f1c3 0307 	rsb	r3, r3, #7
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d00a      	beq.n	80043c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80043b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b6:	f383 8811 	msr	BASEPRI, r3
 80043ba:	f3bf 8f6f 	isb	sy
 80043be:	f3bf 8f4f 	dsb	sy
 80043c2:	60bb      	str	r3, [r7, #8]
}
 80043c4:	bf00      	nop
 80043c6:	e7fe      	b.n	80043c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043c8:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <xPortStartScheduler+0x134>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	4a1d      	ldr	r2, [pc, #116]	; (8004444 <xPortStartScheduler+0x134>)
 80043d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043d2:	4b1c      	ldr	r3, [pc, #112]	; (8004444 <xPortStartScheduler+0x134>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043da:	4a1a      	ldr	r2, [pc, #104]	; (8004444 <xPortStartScheduler+0x134>)
 80043dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80043e6:	4b18      	ldr	r3, [pc, #96]	; (8004448 <xPortStartScheduler+0x138>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a17      	ldr	r2, [pc, #92]	; (8004448 <xPortStartScheduler+0x138>)
 80043ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80043f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <xPortStartScheduler+0x138>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a14      	ldr	r2, [pc, #80]	; (8004448 <xPortStartScheduler+0x138>)
 80043f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80043fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80043fe:	f000 f8dd 	bl	80045bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <xPortStartScheduler+0x13c>)
 8004404:	2200      	movs	r2, #0
 8004406:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004408:	f000 f8fc 	bl	8004604 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800440c:	4b10      	ldr	r3, [pc, #64]	; (8004450 <xPortStartScheduler+0x140>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <xPortStartScheduler+0x140>)
 8004412:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004416:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004418:	f7ff ff66 	bl	80042e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800441c:	f7ff f852 	bl	80034c4 <vTaskSwitchContext>
	prvTaskExitError();
 8004420:	f7ff ff1e 	bl	8004260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	e000ed00 	.word	0xe000ed00
 8004434:	410fc271 	.word	0x410fc271
 8004438:	410fc270 	.word	0x410fc270
 800443c:	e000e400 	.word	0xe000e400
 8004440:	20000d20 	.word	0x20000d20
 8004444:	20000d24 	.word	0x20000d24
 8004448:	e000ed20 	.word	0xe000ed20
 800444c:	2000000c 	.word	0x2000000c
 8004450:	e000ef34 	.word	0xe000ef34

08004454 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	607b      	str	r3, [r7, #4]
}
 800446c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800446e:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <vPortEnterCritical+0x58>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	3301      	adds	r3, #1
 8004474:	4a0d      	ldr	r2, [pc, #52]	; (80044ac <vPortEnterCritical+0x58>)
 8004476:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <vPortEnterCritical+0x58>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d10f      	bne.n	80044a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004480:	4b0b      	ldr	r3, [pc, #44]	; (80044b0 <vPortEnterCritical+0x5c>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	603b      	str	r3, [r7, #0]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <vPortEnterCritical+0x4a>
	}
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	2000000c 	.word	0x2000000c
 80044b0:	e000ed04 	.word	0xe000ed04

080044b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <vPortExitCritical+0x50>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d10a      	bne.n	80044d8 <vPortExitCritical+0x24>
	__asm volatile
 80044c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c6:	f383 8811 	msr	BASEPRI, r3
 80044ca:	f3bf 8f6f 	isb	sy
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	607b      	str	r3, [r7, #4]
}
 80044d4:	bf00      	nop
 80044d6:	e7fe      	b.n	80044d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <vPortExitCritical+0x50>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3b01      	subs	r3, #1
 80044de:	4a09      	ldr	r2, [pc, #36]	; (8004504 <vPortExitCritical+0x50>)
 80044e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <vPortExitCritical+0x50>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d105      	bne.n	80044f6 <vPortExitCritical+0x42>
 80044ea:	2300      	movs	r3, #0
 80044ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f383 8811 	msr	BASEPRI, r3
}
 80044f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80044f6:	bf00      	nop
 80044f8:	370c      	adds	r7, #12
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	2000000c 	.word	0x2000000c
	...

08004510 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004510:	f3ef 8009 	mrs	r0, PSP
 8004514:	f3bf 8f6f 	isb	sy
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <pxCurrentTCBConst>)
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	f01e 0f10 	tst.w	lr, #16
 8004520:	bf08      	it	eq
 8004522:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004526:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452a:	6010      	str	r0, [r2, #0]
 800452c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004530:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004534:	f380 8811 	msr	BASEPRI, r0
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f7fe ffc0 	bl	80034c4 <vTaskSwitchContext>
 8004544:	f04f 0000 	mov.w	r0, #0
 8004548:	f380 8811 	msr	BASEPRI, r0
 800454c:	bc09      	pop	{r0, r3}
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	6808      	ldr	r0, [r1, #0]
 8004552:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004556:	f01e 0f10 	tst.w	lr, #16
 800455a:	bf08      	it	eq
 800455c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004560:	f380 8809 	msr	PSP, r0
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	f3af 8000 	nop.w

08004570 <pxCurrentTCBConst>:
 8004570:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004574:	bf00      	nop
 8004576:	bf00      	nop

08004578 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
	__asm volatile
 800457e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004582:	f383 8811 	msr	BASEPRI, r3
 8004586:	f3bf 8f6f 	isb	sy
 800458a:	f3bf 8f4f 	dsb	sy
 800458e:	607b      	str	r3, [r7, #4]
}
 8004590:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004592:	f7fe fedd 	bl	8003350 <xTaskIncrementTick>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800459c:	4b06      	ldr	r3, [pc, #24]	; (80045b8 <xPortSysTickHandler+0x40>)
 800459e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	2300      	movs	r3, #0
 80045a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f383 8811 	msr	BASEPRI, r3
}
 80045ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045b0:	bf00      	nop
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045c6:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <vPortSetupTimerInterrupt+0x38>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045cc:	4b0a      	ldr	r3, [pc, #40]	; (80045f8 <vPortSetupTimerInterrupt+0x3c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a0a      	ldr	r2, [pc, #40]	; (80045fc <vPortSetupTimerInterrupt+0x40>)
 80045d2:	fba2 2303 	umull	r2, r3, r2, r3
 80045d6:	099b      	lsrs	r3, r3, #6
 80045d8:	4a09      	ldr	r2, [pc, #36]	; (8004600 <vPortSetupTimerInterrupt+0x44>)
 80045da:	3b01      	subs	r3, #1
 80045dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80045de:	4b04      	ldr	r3, [pc, #16]	; (80045f0 <vPortSetupTimerInterrupt+0x34>)
 80045e0:	2207      	movs	r2, #7
 80045e2:	601a      	str	r2, [r3, #0]
}
 80045e4:	bf00      	nop
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	e000e010 	.word	0xe000e010
 80045f4:	e000e018 	.word	0xe000e018
 80045f8:	20000000 	.word	0x20000000
 80045fc:	10624dd3 	.word	0x10624dd3
 8004600:	e000e014 	.word	0xe000e014

08004604 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004604:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004614 <vPortEnableVFP+0x10>
 8004608:	6801      	ldr	r1, [r0, #0]
 800460a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800460e:	6001      	str	r1, [r0, #0]
 8004610:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004612:	bf00      	nop
 8004614:	e000ed88 	.word	0xe000ed88

08004618 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d914      	bls.n	8004654 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <vPortValidateInterruptPriority+0x70>)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4413      	add	r3, r2
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004634:	4b15      	ldr	r3, [pc, #84]	; (800468c <vPortValidateInterruptPriority+0x74>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	7afa      	ldrb	r2, [r7, #11]
 800463a:	429a      	cmp	r2, r3
 800463c:	d20a      	bcs.n	8004654 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	607b      	str	r3, [r7, #4]
}
 8004650:	bf00      	nop
 8004652:	e7fe      	b.n	8004652 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <vPortValidateInterruptPriority+0x78>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800465c:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <vPortValidateInterruptPriority+0x7c>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d90a      	bls.n	800467a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	603b      	str	r3, [r7, #0]
}
 8004676:	bf00      	nop
 8004678:	e7fe      	b.n	8004678 <vPortValidateInterruptPriority+0x60>
	}
 800467a:	bf00      	nop
 800467c:	3714      	adds	r7, #20
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000e3f0 	.word	0xe000e3f0
 800468c:	20000d20 	.word	0x20000d20
 8004690:	e000ed0c 	.word	0xe000ed0c
 8004694:	20000d24 	.word	0x20000d24

08004698 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	; 0x28
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046a0:	2300      	movs	r3, #0
 80046a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046a4:	f7fe fd98 	bl	80031d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046a8:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <pvPortMalloc+0x180>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046b0:	f000 f920 	bl	80048f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046b4:	4b59      	ldr	r3, [pc, #356]	; (800481c <pvPortMalloc+0x184>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f040 8093 	bne.w	80047e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01d      	beq.n	8004704 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046c8:	2208      	movs	r2, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4413      	add	r3, r2
 80046ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d014      	beq.n	8004704 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f023 0307 	bic.w	r3, r3, #7
 80046e0:	3308      	adds	r3, #8
 80046e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00a      	beq.n	8004704 <pvPortMalloc+0x6c>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	f383 8811 	msr	BASEPRI, r3
 80046f6:	f3bf 8f6f 	isb	sy
 80046fa:	f3bf 8f4f 	dsb	sy
 80046fe:	617b      	str	r3, [r7, #20]
}
 8004700:	bf00      	nop
 8004702:	e7fe      	b.n	8004702 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d06e      	beq.n	80047e8 <pvPortMalloc+0x150>
 800470a:	4b45      	ldr	r3, [pc, #276]	; (8004820 <pvPortMalloc+0x188>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	429a      	cmp	r2, r3
 8004712:	d869      	bhi.n	80047e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004714:	4b43      	ldr	r3, [pc, #268]	; (8004824 <pvPortMalloc+0x18c>)
 8004716:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004718:	4b42      	ldr	r3, [pc, #264]	; (8004824 <pvPortMalloc+0x18c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800471e:	e004      	b.n	800472a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004722:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	429a      	cmp	r2, r3
 8004732:	d903      	bls.n	800473c <pvPortMalloc+0xa4>
 8004734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f1      	bne.n	8004720 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800473c:	4b36      	ldr	r3, [pc, #216]	; (8004818 <pvPortMalloc+0x180>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	429a      	cmp	r2, r3
 8004744:	d050      	beq.n	80047e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2208      	movs	r2, #8
 800474c:	4413      	add	r3, r2
 800474e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	1ad2      	subs	r2, r2, r3
 8004760:	2308      	movs	r3, #8
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	429a      	cmp	r2, r3
 8004766:	d91f      	bls.n	80047a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4413      	add	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <pvPortMalloc+0xf8>
	__asm volatile
 800477a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800477e:	f383 8811 	msr	BASEPRI, r3
 8004782:	f3bf 8f6f 	isb	sy
 8004786:	f3bf 8f4f 	dsb	sy
 800478a:	613b      	str	r3, [r7, #16]
}
 800478c:	bf00      	nop
 800478e:	e7fe      	b.n	800478e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	1ad2      	subs	r2, r2, r3
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047a2:	69b8      	ldr	r0, [r7, #24]
 80047a4:	f000 f908 	bl	80049b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <pvPortMalloc+0x188>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	4a1b      	ldr	r2, [pc, #108]	; (8004820 <pvPortMalloc+0x188>)
 80047b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <pvPortMalloc+0x188>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <pvPortMalloc+0x190>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d203      	bcs.n	80047ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047c2:	4b17      	ldr	r3, [pc, #92]	; (8004820 <pvPortMalloc+0x188>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a18      	ldr	r2, [pc, #96]	; (8004828 <pvPortMalloc+0x190>)
 80047c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	4b13      	ldr	r3, [pc, #76]	; (800481c <pvPortMalloc+0x184>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047da:	2200      	movs	r2, #0
 80047dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <pvPortMalloc+0x194>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3301      	adds	r3, #1
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <pvPortMalloc+0x194>)
 80047e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047e8:	f7fe fd04 	bl	80031f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <pvPortMalloc+0x174>
	__asm volatile
 80047f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fa:	f383 8811 	msr	BASEPRI, r3
 80047fe:	f3bf 8f6f 	isb	sy
 8004802:	f3bf 8f4f 	dsb	sy
 8004806:	60fb      	str	r3, [r7, #12]
}
 8004808:	bf00      	nop
 800480a:	e7fe      	b.n	800480a <pvPortMalloc+0x172>
	return pvReturn;
 800480c:	69fb      	ldr	r3, [r7, #28]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3728      	adds	r7, #40	; 0x28
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20004930 	.word	0x20004930
 800481c:	20004944 	.word	0x20004944
 8004820:	20004934 	.word	0x20004934
 8004824:	20004928 	.word	0x20004928
 8004828:	20004938 	.word	0x20004938
 800482c:	2000493c 	.word	0x2000493c

08004830 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d04d      	beq.n	80048de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004842:	2308      	movs	r3, #8
 8004844:	425b      	negs	r3, r3
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4413      	add	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <vPortFree+0xb8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10a      	bne.n	8004874 <vPortFree+0x44>
	__asm volatile
 800485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004862:	f383 8811 	msr	BASEPRI, r3
 8004866:	f3bf 8f6f 	isb	sy
 800486a:	f3bf 8f4f 	dsb	sy
 800486e:	60fb      	str	r3, [r7, #12]
}
 8004870:	bf00      	nop
 8004872:	e7fe      	b.n	8004872 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <vPortFree+0x62>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60bb      	str	r3, [r7, #8]
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	685a      	ldr	r2, [r3, #4]
 8004896:	4b14      	ldr	r3, [pc, #80]	; (80048e8 <vPortFree+0xb8>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d01e      	beq.n	80048de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d11a      	bne.n	80048de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4b0e      	ldr	r3, [pc, #56]	; (80048e8 <vPortFree+0xb8>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	43db      	mvns	r3, r3
 80048b2:	401a      	ands	r2, r3
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048b8:	f7fe fc8e 	bl	80031d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <vPortFree+0xbc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4413      	add	r3, r2
 80048c6:	4a09      	ldr	r2, [pc, #36]	; (80048ec <vPortFree+0xbc>)
 80048c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048ca:	6938      	ldr	r0, [r7, #16]
 80048cc:	f000 f874 	bl	80049b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <vPortFree+0xc0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <vPortFree+0xc0>)
 80048d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80048da:	f7fe fc8b 	bl	80031f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80048de:	bf00      	nop
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20004944 	.word	0x20004944
 80048ec:	20004934 	.word	0x20004934
 80048f0:	20004940 	.word	0x20004940

080048f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80048fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <prvHeapInit+0xac>)
 8004902:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00c      	beq.n	8004928 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3307      	adds	r3, #7
 8004912:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f023 0307 	bic.w	r3, r3, #7
 800491a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	4a1f      	ldr	r2, [pc, #124]	; (80049a0 <prvHeapInit+0xac>)
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800492c:	4a1d      	ldr	r2, [pc, #116]	; (80049a4 <prvHeapInit+0xb0>)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004932:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <prvHeapInit+0xb0>)
 8004934:	2200      	movs	r2, #0
 8004936:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4413      	add	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004940:	2208      	movs	r2, #8
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f023 0307 	bic.w	r3, r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4a15      	ldr	r2, [pc, #84]	; (80049a8 <prvHeapInit+0xb4>)
 8004954:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004956:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <prvHeapInit+0xb4>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800495e:	4b12      	ldr	r3, [pc, #72]	; (80049a8 <prvHeapInit+0xb4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	1ad2      	subs	r2, r2, r3
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004974:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <prvHeapInit+0xb4>)
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <prvHeapInit+0xb8>)
 8004982:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <prvHeapInit+0xbc>)
 800498a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800498c:	4b09      	ldr	r3, [pc, #36]	; (80049b4 <prvHeapInit+0xc0>)
 800498e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	20000d28 	.word	0x20000d28
 80049a4:	20004928 	.word	0x20004928
 80049a8:	20004930 	.word	0x20004930
 80049ac:	20004938 	.word	0x20004938
 80049b0:	20004934 	.word	0x20004934
 80049b4:	20004944 	.word	0x20004944

080049b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049c0:	4b28      	ldr	r3, [pc, #160]	; (8004a64 <prvInsertBlockIntoFreeList+0xac>)
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e002      	b.n	80049cc <prvInsertBlockIntoFreeList+0x14>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d8f7      	bhi.n	80049c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	4413      	add	r3, r2
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d108      	bne.n	80049fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	441a      	add	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68ba      	ldr	r2, [r7, #8]
 8004a04:	441a      	add	r2, r3
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d118      	bne.n	8004a40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	4b15      	ldr	r3, [pc, #84]	; (8004a68 <prvInsertBlockIntoFreeList+0xb0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d00d      	beq.n	8004a36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	441a      	add	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	601a      	str	r2, [r3, #0]
 8004a34:	e008      	b.n	8004a48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <prvInsertBlockIntoFreeList+0xb0>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	e003      	b.n	8004a48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d002      	beq.n	8004a56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a56:	bf00      	nop
 8004a58:	3714      	adds	r7, #20
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	20004928 	.word	0x20004928
 8004a68:	20004930 	.word	0x20004930

08004a6c <__libc_init_array>:
 8004a6c:	b570      	push	{r4, r5, r6, lr}
 8004a6e:	4d0d      	ldr	r5, [pc, #52]	; (8004aa4 <__libc_init_array+0x38>)
 8004a70:	4c0d      	ldr	r4, [pc, #52]	; (8004aa8 <__libc_init_array+0x3c>)
 8004a72:	1b64      	subs	r4, r4, r5
 8004a74:	10a4      	asrs	r4, r4, #2
 8004a76:	2600      	movs	r6, #0
 8004a78:	42a6      	cmp	r6, r4
 8004a7a:	d109      	bne.n	8004a90 <__libc_init_array+0x24>
 8004a7c:	4d0b      	ldr	r5, [pc, #44]	; (8004aac <__libc_init_array+0x40>)
 8004a7e:	4c0c      	ldr	r4, [pc, #48]	; (8004ab0 <__libc_init_array+0x44>)
 8004a80:	f000 f82e 	bl	8004ae0 <_init>
 8004a84:	1b64      	subs	r4, r4, r5
 8004a86:	10a4      	asrs	r4, r4, #2
 8004a88:	2600      	movs	r6, #0
 8004a8a:	42a6      	cmp	r6, r4
 8004a8c:	d105      	bne.n	8004a9a <__libc_init_array+0x2e>
 8004a8e:	bd70      	pop	{r4, r5, r6, pc}
 8004a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a94:	4798      	blx	r3
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7ee      	b.n	8004a78 <__libc_init_array+0xc>
 8004a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a9e:	4798      	blx	r3
 8004aa0:	3601      	adds	r6, #1
 8004aa2:	e7f2      	b.n	8004a8a <__libc_init_array+0x1e>
 8004aa4:	08004b60 	.word	0x08004b60
 8004aa8:	08004b60 	.word	0x08004b60
 8004aac:	08004b60 	.word	0x08004b60
 8004ab0:	08004b64 	.word	0x08004b64

08004ab4 <memcpy>:
 8004ab4:	440a      	add	r2, r1
 8004ab6:	4291      	cmp	r1, r2
 8004ab8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004abc:	d100      	bne.n	8004ac0 <memcpy+0xc>
 8004abe:	4770      	bx	lr
 8004ac0:	b510      	push	{r4, lr}
 8004ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004aca:	4291      	cmp	r1, r2
 8004acc:	d1f9      	bne.n	8004ac2 <memcpy+0xe>
 8004ace:	bd10      	pop	{r4, pc}

08004ad0 <memset>:
 8004ad0:	4402      	add	r2, r0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d100      	bne.n	8004ada <memset+0xa>
 8004ad8:	4770      	bx	lr
 8004ada:	f803 1b01 	strb.w	r1, [r3], #1
 8004ade:	e7f9      	b.n	8004ad4 <memset+0x4>

08004ae0 <_init>:
 8004ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae2:	bf00      	nop
 8004ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ae6:	bc08      	pop	{r3}
 8004ae8:	469e      	mov	lr, r3
 8004aea:	4770      	bx	lr

08004aec <_fini>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	bf00      	nop
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr
